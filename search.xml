<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何拥有属于你的Hexo博客（二）</title>
      <link href="/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>阅读本篇前，请先阅读前面的文章：</p><p>本篇转载自：<a href="https://www.fomal.cc/">[Fomalhaut🥝]</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</li><li>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</li></ol><h2 id="2-Vercel部署与自定义域名"><a href="#2-Vercel部署与自定义域名" class="headerlink" title="2.Vercel部署与自定义域名"></a>2.Vercel部署与自定义域名</h2><h3 id="2-1-Vercel部署"><a href="#2-1-Vercel部署" class="headerlink" title="2.1 Vercel部署"></a>2.1 Vercel部署</h3><p>Vercel简介：<a href="https://vercel.com/dashboard">vercel</a>是一个代码托管平台，它能够托管你的静态html界面，甚至能够托管你的node.js与Python服务端脚本，是<strong>不想买服务器的懒人的福音</strong>！</p><p><strong>使用Vercel部署Hexo项目步骤：</strong></p><ol><li>首先需要一个Vercel账号，这里<strong>推荐用GitHub账户关联，这样你就可以在vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）。<br><a href="https://s1.vika.cn/space/2022/10/27/5ecde0efb97e4efe8c872c07f2b29301"><img src="https://s1.vika.cn/space/2022/10/27/5ecde0efb97e4efe8c872c07f2b29301" alt="image-20221027223132537" style="zoom: 50%;"></a></li><li>当你用你的Github账户关联并绑定手机号登录之后，点击右上角的<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示你要导入该仓库。<br><a href="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4"><img src="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4" alt="image-20221027223231192" style="zoom: 50%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/23780c3fc63546559ff02d303f97e37d"><img src="https://s1.vika.cn/space/2022/10/27/23780c3fc63546559ff02d303f97e37d" alt="image-20221027223420282" style="zoom:50%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/7e1c080e435648a1a27a0f21d19e979d"><img src="https://s1.vika.cn/space/2022/10/27/7e1c080e435648a1a27a0f21d19e979d" alt="image-20221027223742660" style="zoom: 50%;"></a></li><li>起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功，部署成功后电极<code>Continue to Dashboard</code>跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为GFW最近把Vercel屏蔽了。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/09b5ce9b3ac64d2dad2acdf3cca92b5f"><img src="https://s1.vika.cn/space/2022/10/27/09b5ce9b3ac64d2dad2acdf3cca92b5f" alt="image-20221027224225808" style="zoom:33%;"></a></p><p><a href="https://s1.vika.cn/space/2022/10/27/43c6816280914f6ebbab1d6ec345c8f9"><img src="https://s1.vika.cn/space/2022/10/27/43c6816280914f6ebbab1d6ec345c8f9" alt="image-20221027224405464" style="zoom:33%;"></a></p><h3 id="2-2-绑定自定义域名"><a href="#2-2-绑定自定义域名" class="headerlink" title="2.2 绑定自定义域名"></a>2.2 绑定自定义域名</h3><p>现在你的个人网站的地址是 <code>username.github.io</code>以及在Vercel上有一个<code>blog-demo-chi.vercel.app</code>。如果觉得不够定制化，可以购买一个专属域名。</p><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p><p>腾讯云、阿里云等都是不错的域名代理商，建议选用<code>com</code>，<code>cn</code>或<code>cc</code>这类常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。此处以阿里云域名为例进行说明，购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加Vercel所需的解析记录，注意博主这里是解析二级域名只需要解析一条即可。但是如果是一级域名，需要解析两个，一个是<code>@</code>，另外一个是<code>www</code>，Vercel建议是<code>@</code>的解析重定向至<code>www</code>。</p><p>以我的域名：<code>fomal.cc</code>为例进行说明</p><table><thead><tr><th align="center">主机记录</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">www</td><td align="center">解析后的域名为 <a href="http://www.fomal.cc/">www.fomal.cc</a></td></tr><tr><td align="center">@</td><td align="center">直接解析主域名 <a href="http://fomal.cc/">fomal.cc</a></td></tr><tr><td align="center">*</td><td align="center">泛解析，匹配其他所有域名 *.fomal.cc</td></tr><tr><td align="center">mail</td><td align="center">将域名解析为 <a href="http://mail.fomal.cc/">mail.fomal.cc</a>，通常用于解析邮箱服务器</td></tr><tr><td align="center">二级</td><td align="center">如 <a href="http://abc.fomal.cc/">abc.fomal.cc</a>，填写 abc</td></tr><tr><td align="center">手机网站</td><td align="center">如 <a href="http://m.fomal.cc/">m.fomal.cc</a>，填写 m</td></tr><tr><td align="center">显性URL</td><td align="center">不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p><table><thead><tr><th align="center">记录类型</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td align="center">CNAME</td><td align="center">如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td align="center">MX</td><td align="center">如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td align="center">TXT</td><td align="center">在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td align="center">NS</td><td align="center">域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td align="center">AAAA</td><td align="center">用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td align="center">SRV</td><td align="center">记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td align="center">显性URL</td><td align="center">从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td align="center">隐性URL</td><td align="center">类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table><p><strong>添加自定义域名的步骤：</strong></p><ol><li>点击Vercel控制面板右上角的<code>View Domains</code>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入刚刚购买的域名，我这里以二级域名<code>demo.fomal.cc</code>为例进行说明，添加后他会提示你添加一条DNS解析记录。<br><a href="https://s1.vika.cn/space/2022/10/27/f0890ccf90d04ac7985a40558b8f0aad"><img src="https://s1.vika.cn/space/2022/10/27/f0890ccf90d04ac7985a40558b8f0aad" alt="image-20221027224803563" style="zoom: 50%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/3a1e809ca99a452fae6229d9b69134ad"><img src="https://s1.vika.cn/space/2022/10/27/3a1e809ca99a452fae6229d9b69134ad" alt="image-20221027224830609" style="zoom: 67%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/1bd6bdd5cc924661a0bf779997240e86"><img src="https://s1.vika.cn/space/2022/10/27/1bd6bdd5cc924661a0bf779997240e86" alt="image-20221027225338126" style="zoom: 67%;"></a><br><strong>PS</strong>：如果你是新买的域名，直接输入你新买的一级域名即可，例如<code>demo123.com</code>，他会推荐你将<code>demo123.com</code>重定向至<code>www.demo123.com</code>，点<code>ADD</code>即可，然后他会提示你添加两条解析记录，一个是<code>@</code>开头的和<code>CNAME</code>开头的，添加记录的方法和二级域名一致。<br><a href="https://s1.vika.cn/space/2022/10/27/66c6d6f8fac84481b788228c4222864d"><img src="https://s1.vika.cn/space/2022/10/27/66c6d6f8fac84481b788228c4222864d" alt="image-20221027225758503" style="zoom: 67%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/d6dd5ec65e93439482a7ddd5833ebd9d"><img src="https://s1.vika.cn/space/2022/10/27/d6dd5ec65e93439482a7ddd5833ebd9d" alt="image-20221027225808449" style="zoom: 67%;"></a></li><li>在阿里云域名解析记录里面添加如下记录，其中记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。<br><a href="https://s1.vika.cn/space/2022/10/27/83c253f0710f44c1b80bc662e4a97636"><img src="https://s1.vika.cn/space/2022/10/27/83c253f0710f44c1b80bc662e4a97636" alt="image-20221027230049667" style="zoom: 67%;"></a></li><li>回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。<br><a href="https://s1.vika.cn/space/2022/10/27/9604de65a5524ba88d7e43f9412229d3"><img src="https://s1.vika.cn/space/2022/10/27/9604de65a5524ba88d7e43f9412229d3" alt="image-20221027230357362" style="zoom: 67%;"></a><br><a href="https://s1.vika.cn/space/2022/10/27/244bc979f30149778b9e1ffc7038ecd0"><img src="https://s1.vika.cn/space/2022/10/27/244bc979f30149778b9e1ffc7038ecd0" alt="image-20221027230421929" style="zoom: 50%;"></a></li><li>当你有了新的域名之后，需要<code>[BlogRoot]\_config.yml</code>文件中的<code>url</code>配置项为自己的新域名，这样博客的文章链接才会正确生成。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/28/fa95d5aef2ac45deb4a02400056047e1"><img src="https://s1.vika.cn/space/2022/10/28/fa95d5aef2ac45deb4a02400056047e1" alt="image-20221028113042788" style="zoom:50%;"></a></p><h2 id="3-安装主题"><a href="#3-安装主题" class="headerlink" title="3.安装主题"></a>3.安装主题</h2><p>本教程用的 🦋 hexo-theme-butterfly 主题 v4.5.0最新版，请放心食用。</p><p>本教程用的是npm方式安装的 <code>hexo-theme-butterfly</code>，后续魔改时更改的文件都是【C:&#x2F;Hexo-Blog&#x2F;blog-demo&#x2F;node_modules&#x2F;hexo-theme-butterfly】文件夹中的文件。如果你是<code>git clone</code>克隆方式安装的主题，请在【C:&#x2F;Hexo-Blog&#x2F;blog-demo&#x2F;themes&#x2F;butterfly】文件夹下修改对应的文件。</p><ul><li>npm安装(推荐)</li><li>Github安装</li><li>Gitee安装</li></ul><p>注意：此方法只支持 Hexo 5.0.0以上版本!</p><p>在你的博客根目录（我这里路径为【C:&#x2F;Hexo-Blog&#x2F;blog-demo】）打开<code>Git BASH</code>命令窗口执行<code>npm i hexo-theme-butterfly</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在【C:&#x2F;Hexo-Blog&#x2F;blog-demo&#x2F;node_modules】文件夹下找到hexo-theme-butterfly文件夹</p><p>升级方法：在博客根目录下，运行 <code>npm update hexo-theme-butterfly</code>。<br>升级前请将<code>hexo-theme-butterfly</code>文件夹备份，npm更新会直接覆盖成新的包。</p><h2 id="4-应用主题"><a href="#4-应用主题" class="headerlink" title="4.应用主题"></a>4.应用主题</h2><ol><li><p>修改站点配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br></pre></td></tr></table></figure><p>，把主题改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">butterfly</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>如果你没有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pug</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stylus</span><br></pre></td></tr></table></figure><p>的渲染器，请下载安装，这两个渲染器是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Butterfly</span><br></pre></td></tr></table></figure><p>生成基础页面所需的依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做，高度魔改的一般都不会升级主题了，不然魔改的会被覆盖掉）<br>把主题文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录里（我这里路径为【C:&#x2F;Hexo-Blog&#x2F;blog-demo】），同时重新命名为 <code>_config.butterfly.yml</code>。以后只需要在 <code>_config.butterfly.yml</code>进行配置即可生效。Hexo会自动合併主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p></li></ol><h2 id="5-基础用法说明"><a href="#5-基础用法说明" class="headerlink" title="5. 基础用法说明"></a>5. 基础用法说明</h2><h3 id="5-1-Front-matter"><a href="#5-1-Front-matter" class="headerlink" title="5.1 Front-matter"></a>5.1 Front-matter</h3><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p><p><strong>Page Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">写法</th><th>解释</th></tr></thead><tbody><tr><td align="left">title</td><td>【必需】页面标题</td></tr><tr><td align="left">date</td><td>【必需】页面创建日期</td></tr><tr><td align="left">type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td align="left">updated</td><td>【可选】页面更新日期</td></tr><tr><td align="left">description</td><td>【可选】页面描述</td></tr><tr><td align="left">keywords</td><td>【可选】页面关键字</td></tr><tr><td align="left">comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="left">top_img</td><td>【可选】页面顶部图片</td></tr><tr><td align="left">mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="left">aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td align="left">highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><p><strong>Post Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>注意：我的博客根目录路径为 【C:&#x2F;Hexo-Blog&#x2F;blog-demo】，下文所说的根目录都是此路径，将用[BlogRoot]代替。</p><h3 id="5-2-标签页"><a href="#5-2-标签页" class="headerlink" title="5.2 标签页"></a>5.2 标签页</h3><ol><li><p>前往你的Hexo博客根目录，打开<code>Git Bash</code>执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</p></li><li><p>修改<code>[BlogRoot]\source\tags\index.md</code>，添加<code>type: &quot;tags&quot;</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-10-28 12:00:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-友情链接"><a href="#5-3-友情链接" class="headerlink" title="5.3 友情链接"></a>5.3 友情链接</h3><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>link</code>文件夹</p></li><li><p>修改<code>[BlogRoot]\source\link\index.md</code>，添加<code>type: &quot;link&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: link</span><br><span class="line">date: 2022-10-28 12:00:00</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p>前往<code>[BlogRoot]\source\_data</code>创建一个<code>link.yml</code>文件（如果沒有 <code>_data</code> 文件夹，请自行创建），并写入如下信息（根据你的需要写）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">1</span><span class="string">.技术支持</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">本网站的搭建由以下开源作者提供技术支持</span></span><br><span class="line">  <span class="attr">link_list:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> </span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://source.fomal.cc/siteshot/hexo.io.jpg</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">2</span><span class="string">.友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">一些好朋友~~</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fomalhaut🥝</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://fomal.cc/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/assets/head.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Future</span> <span class="string">is</span> <span class="string">now</span> <span class="string">🍭🍭🍭</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://source.fomal.cc/siteshot/www.fomal.cn.jpg</span></span><br></pre></td></tr></table></figure><p>class_name和class_desc支持 html 格式，如不需要，也可以留空。</p></li></ol><h3 id="5-4-图库"><a href="#5-4-图库" class="headerlink" title="5.4 图库"></a>5.4 图库</h3><p>图库页面只是普通的页面，你只需要<code>hexo new page xxx</code>创建你的页面就行。</p><p>然后使用外挂标签 <code>galleryGroup</code>，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;封面专区&#x27; &#x27;本站用作文章封面的图片，不保证分辨率&#x27; &#x27;/box/Gallery/photo&#x27; https://source.fomal.cc/img/default<span class="emphasis">_cover_</span>61.webp %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;背景专区&#x27; &#x27;收藏的一些的背景与壁纸，分辨率很高&#x27; &#x27;/box/Gallery/wallpaper&#x27; https://source.fomal.cc/img/dm11.webp %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="5-5-子页面"><a href="#5-5-子页面" class="headerlink" title="5.5 子页面"></a>5.5 子页面</h3><p>子页面也是普通的页面，你只需要<code>hexo new page xxx</code>创建你的页面就行。</p><p>然后使用标签外挂 <code>gallery</code>，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">&#123;% gallery %&#125; </span><br><span class="line">![<span class="string">p1</span>](<span class="link"> https://source.fomal.cc/img/default_cover_1.webp </span>) </span><br><span class="line">![<span class="string">p2</span>](<span class="link"> https://source.fomal.cc/img/default_cover_2.webp </span>) </span><br><span class="line">![<span class="string">p3</span>](<span class="link"> https://source.fomal.cc/img/default_cover_3.webp </span>) </span><br><span class="line">![<span class="string">p4</span>](<span class="link"> https://source.fomal.cc/img/default_cover_4.webp </span>) </span><br><span class="line">![<span class="string">p5</span>](<span class="link"> https://source.fomal.cc/img/default_cover_5.webp </span>) </span><br><span class="line">![<span class="string">p6</span>](<span class="link"> https://source.fomal.cc/img/default_cover_6.webp </span>) </span><br><span class="line">![<span class="string">p7</span>](<span class="link"> https://source.fomal.cc/img/default_cover_7.webp </span>) </span><br><span class="line">![<span class="string">p8</span>](<span class="link"> https://source.fomal.cc/img/default_cover_8.webp </span>) </span><br><span class="line">![<span class="string">p9</span>](<span class="link"> https://source.fomal.cc/img/default_cover_9.webp </span>) </span><br><span class="line">![<span class="string">p10</span>](<span class="link"> https://source.fomal.cc/img/default_cover_10.webp </span>) </span><br><span class="line">![<span class="string">p11</span>](<span class="link"> https://source.fomal.cc/img/default_cover_11.webp </span>) </span><br><span class="line">![<span class="string">p12</span>](<span class="link"> https://source.fomal.cc/img/default_cover_12.webp </span>) </span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-404页面"><a href="#5-6-404页面" class="headerlink" title="5.6 404页面"></a>5.6 404页面</h3><p>主題內置了一个简单的404页面，可在设置中开放。</p><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础入门笔记</title>
      <link href="/2022/12/16/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2022/12/16/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、C-初识"><a href="#一、C-初识" class="headerlink" title="一、C++初识"></a>一、C++初识</h1><h2 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h2><p><strong>作用：</strong>在代码中加入一些说明和解释，方便自己或其他程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li>单行注释：<code>//描述信息</code><ol><li>通常放在一行代码的上方，或一条语句的末尾，对该行代码说明</li></ol></li><li>多行注释：<code>/*描述信息*/</code><ol><li>通常放在一段代码的上方，对该段代码做整体说明</li></ol></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h2><p><strong>作用：</strong>给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法：</strong> <code>数据类型 变量名 = 初始值</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 变量的定义 </span></span><br><span class="line">    <span class="comment">// 语法：[数据类型] [变量名] = [初始值]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span>&lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-常量"><a href="#1-3-常量" class="headerlink" title="1.3 常量"></a>1.3 常量</h2><p><strong>作用：</strong>用于记录程序中不可更改的数据</p><p><strong>C++定义常量的两种方式：</strong></p><ol><li>#define 宏常量：<code>#define 常量名 常量值</code><ol><li>&#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量</li></ol></li><li>const修饰的变量：<code>const 数据类型 常量名 =常量值</code><ol><li>&#x3D;&#x3D;通常在变量定义前加关键字const&#x3D;&#x3D;，修饰变量为常量，不可修改</li></ol></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> days 7 </span></span><br><span class="line"><span class="comment">//  1.宏常量定义 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一周有： &quot;</span>&lt;&lt; days &lt;&lt; <span class="string">&quot;天&quot;</span>&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  const 修饰的变量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> moth = <span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一个月有：&quot;</span> &lt;&lt; moth &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量不可修改，最初定义多少就是多少</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-关键字"><a href="#1-4-关键字" class="headerlink" title="1.4 关键字"></a>1.4 关键字</h2><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量的时候，不要用关键字</strong></li></ul><p><strong>C++关键字如下：</strong></p><p><code>提示： 在给变量或者常量起名称的时候，不要用C++的关键字，否则会产生歧义。</code></p><table><thead><tr><th align="center">asm</th><th align="center">do</th><th align="center">if</th><th align="center">return</th><th align="center">typedef</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">dynamic_cast</td><td align="center">inline</td><td align="center">short</td><td align="center">typeid</td></tr><tr><td align="center">bool</td><td align="center">double</td><td align="center">int</td><td align="center">signed</td><td align="center">typename</td></tr><tr><td align="center">break</td><td align="center">enum</td><td align="center">long</td><td align="center">sizeof</td><td align="center">union</td></tr><tr><td align="center">case</td><td align="center">explicit</td><td align="center">mutable</td><td align="center">static</td><td align="center">unsigned</td></tr><tr><td align="center">catch</td><td align="center">export</td><td align="center">namespace</td><td align="center">static_cast</td><td align="center">using</td></tr><tr><td align="center">char</td><td align="center">extern</td><td align="center">new</td><td align="center">struct</td><td align="center">virtual</td></tr><tr><td align="center">class</td><td align="center">else</td><td align="center">operator</td><td align="center">switch</td><td align="center">vold</td></tr><tr><td align="center">const</td><td align="center">float</td><td align="center">private</td><td align="center">template</td><td align="center">volatile</td></tr><tr><td align="center">const_cast</td><td align="center">for</td><td align="center">protected</td><td align="center">this</td><td align="center">wchar_t</td></tr><tr><td align="center">continue</td><td align="center">friend</td><td align="center">public</td><td align="center">throw</td><td align="center">while</td></tr><tr><td align="center">default</td><td align="center">false</td><td align="center">register</td><td align="center">true</td><td align="center"></td></tr><tr><td align="center">delete</td><td align="center">goto</td><td align="center">reinterpret_cast</td><td align="center">try</td><td align="center"></td></tr></tbody></table><h2 id="1-5-标识符命名规则"><a href="#1-5-标识符命名规则" class="headerlink" title="1.5 标识符命名规则"></a>1.5 标识符命名规则</h2><p><strong>作用：</strong>C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不可以是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人阅读</p></blockquote><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h2 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h2><p><strong>作用：</strong>整型变量表示的是整数类型的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th align="center">数据类型</th><th align="center">占用空间</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">short（短整型）</td><td align="center">2字节</td><td align="center">（-2^15~2^15-1）</td></tr><tr><td align="center">int（整型）</td><td align="center">4字节</td><td align="center">（-2^31~2^31-1）</td></tr><tr><td align="center">long（长整型）</td><td align="center">Windows为4字节 , Linux(x86)为4字节 , (x64)8字节</td><td align="center">（-2^31~2^31-1）</td></tr><tr><td align="center">long long（长长整型）</td><td align="center">8字节</td><td align="center">（-2^63~2^63-1）</td></tr></tbody></table><blockquote><p><strong>数据类型存在的意义：给变量分配合适的内存空间，避免造成空间浪费</strong></p></blockquote><h2 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h2><p><strong>作用</strong>：利用sizeof关键字可以统计数据类型所占内存大小</p><p><strong>语法</strong>：<code>sizeof( 数据类型/变量名 )</code></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 整型</span></span><br><span class="line">    <span class="comment">// 1.短整型 取值范围（-32768 ~ 32767）</span></span><br><span class="line">    <span class="type">short</span> dzx = <span class="number">32767</span>;</span><br><span class="line">    <span class="comment">// 2.整型 </span></span><br><span class="line">    <span class="type">int</span> zx = <span class="number">32768</span>;</span><br><span class="line">    <span class="comment">// 3.长整型</span></span><br><span class="line">    <span class="type">long</span> czx = <span class="number">32768</span>;</span><br><span class="line">    <span class="comment">// 4.长长整型</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cczx = <span class="number">32768</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sizeof语法： sizeof(数据类型/变量名)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long long所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h2><p><strong>作用</strong>：用于表示小数</p><p>浮点型变量分为两种：</p><ul><li>单精度（float）</li><li>双精度（double）</li></ul><p>两者的区别在于表示的有效数字范围不同。</p><table><thead><tr><th align="center">数据类型</th><th align="center">占用空间</th><th align="center">有效数字范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">7位有效数字</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">15~16位有效数字</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 1.单精度（float）编译器遇见小数会默认为双精度小数</span></span><br><span class="line">    <span class="comment">//   一般在初始值后 + f，否则编译器会多做一步转换</span></span><br><span class="line">    <span class="comment">// 默认情况下输出一个小数，最多会显示6位有效数字</span></span><br><span class="line">    <span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">    <span class="type">double</span> f2 = <span class="number">3.14</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出 float 和 double 所占用的内存大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;double所占内存大小:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//科学计数法</span></span><br><span class="line">    <span class="type">float</span> f3 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2</span></span><br><span class="line">    <span class="type">float</span> f4 = <span class="number">3e-2</span>; <span class="comment">// 3* 0.1 ^ 2</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl; <span class="comment">// 输出结果： 300</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f4 = &quot;</span> &lt;&lt; f4 &lt;&lt; endl; <span class="comment">// 输出结果： 0.03</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：e后面是正数n，代表的是 10的n次方 &#x2F; e后面是负数x 代表的是0.1的x次方</strong></p></blockquote><h2 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h2><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong> <code>char 变量名 = &#39;初始值&#39;;</code></p><blockquote><p>注意：1.在显示字符型变量时，用单引号将字符括起来，不要用双引号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>单括号内只能有一个字符，不可以是字符串</span><br></pre></td></tr></table></figure></blockquote><ul><li>C和C++中字符型变量只占用 1个字节。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元中。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 1.字符型的创建方式</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; ch &lt;&lt; endl; <span class="comment">// 输出为 a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.字符型变量所占的内存大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ch所占内存大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl; <span class="comment">// char所占内存大小：1字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.字符型变量创建时常见的错误</span></span><br><span class="line">    <span class="comment">//char ch = &quot;a&quot; // 创建字符型变量时，要用单引号</span></span><br><span class="line">    <span class="comment">//char ch = &#x27;abcdefg&#x27; // 创建字符型变量时，单引号内只能有一个字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.字符型变量对应的ASCII编码</span></span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl; <span class="comment">// 输出为 97</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="number">97</span>; <span class="comment">// 也可以用ASCII码给字符型变量赋值</span></span><br><span class="line">   </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ASCII编码表</strong>：<a href="https://www.runoob.com/w3cnote/ascii.html">点此查看</a></p><p>ASCII编码大致有两部分组成：</p><ul><li>ASCII非打印控制字符：ASCII表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备</li><li>ASCII打印字符：数字 32- 126 分配给了能在键盘上找到的字符，党察看或打印文档时就会出现</li></ul><h2 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h2><p><strong>作用：</strong>用于辨识一些不能显示出来的ASCII字符</p><p>现阶段我们常用的转义字符有：<code>\n  \\ \t</code></p><p><strong>转义字符对照表：</strong> <a href="https://www.cnblogs.com/tabkey9/p/15930390.html">点此查看</a></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转义字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 换行符 \n</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world\n&quot;</span>; <span class="comment">// 等同于 endl；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反斜杠   </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; endl; <span class="comment">// 输出一个 \</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line">    <span class="comment">// 水平制表符 \t</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;abcd\thelloworld&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h2><p><strong>作用：</strong>用于表示一串字符</p><p><strong>两种风格</strong></p><ul><li>C 风格字符串： <code>char 变量名[] = &quot;字符串&quot;</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  </span><br><span class="line">      <span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;str1表示的字符串：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：C 风格的字符串变量名后要加[]，字符串要用双引号括起来。</p></blockquote><ul><li>C++ 风格字符串： <code>string 变量名 = &quot;字符串&quot;</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  </span><br><span class="line">      string str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;str1表示的字符串：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：C++ 风格字符串用的时候要包含 string 头文件 #include <string>。</string></p></blockquote><h2 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h2><p>作用：不二数据类型代表真或假的值</p><p>bool类型只有两个值：</p><ul><li>ture — 真 （本质是1）</li><li>false — 假 （本质是0）</li></ul><p>bool类型占 1个字节 大小</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of bool&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(flag) &lt;&lt; endl; <span class="comment">// 1字节</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h2><p><strong>作用</strong>：用于从键盘获取数据</p><p><strong>关键字</strong>：cin</p><p><strong>语法</strong>： <code>cin &gt;&gt; 变量</code></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//整型输入</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请为整型a赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;整型a的值为：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浮点型输入</span></span><br><span class="line">    <span class="type">float</span> f = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请为浮点型f赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; f;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;浮点型f的值为：&quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符型输入</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请为字符型ch赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型ch的值为：&quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串型输入</span></span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请为字符串型ch赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串型str的值为：&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//布尔型输入</span></span><br><span class="line">    <span class="type">bool</span> bl = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请为布尔型bl赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; bl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;布尔型bl的值为：&quot;</span> &lt;&lt; bl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h1><p><strong>作用：</strong>用于执行代码的运算</p><p><strong>常用语运算符</strong>：</p><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><p><strong>作用：</strong>用于处理四则运算</p><p>算数运算符包括一下符号：</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10+5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10-5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10*5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10&#x2F;5</td><td>2</td></tr><tr><td>%</td><td>取模（取余）</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2;b&#x3D;++a</td><td>a&#x3D;3;b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2;b&#x3D;a++</td><td>a&#x3D;3;b&#x3D;2</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2;b&#x3D;–a;</td><td>a&#x3D;1;b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2;b&#x3D;a–;</td><td>a&#x3D;1;b&#x3D;2;</td></tr></tbody></table><blockquote><p>注意：如果两个相同数据类型的变量相除，结果的数据类型和参与运算的两个数据类型相同</p><p>例如：整数10 &#x2F; 整数 3 结果 为 3。</p><p>只有两个整型变量可以进行取模运算</p></blockquote><p><strong>递增示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 前置递增</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    ++a;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置递增</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    b++;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置递增和后置递增的区别</span></span><br><span class="line">    <span class="comment">// 前置递增</span></span><br><span class="line">    <span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b1 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; ++a1 * b1 &lt;&lt; endl; <span class="comment">//前置递增 变量先+1，再进行运算 结果输出110</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置递增</span></span><br><span class="line">    <span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b2 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; a2++ * b2 &lt;&lt; endl; <span class="comment">//后置递增 先进行运算，变量再 +1 结果输出100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增则相反</p></blockquote><p><strong>递减示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   <span class="comment">// 包含 IO 库，调用cout（输出）、cin（输入）命令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用 std 命名空间，简化代码书写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 前置递减</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    --a;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置递减</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    b--;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置递减和后置递减的区别</span></span><br><span class="line">    <span class="comment">// 前置递减</span></span><br><span class="line">    <span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b1 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; --a1 * b1 &lt;&lt; endl; <span class="comment">//前置递减 变量先-1，再进行运算 结果输出90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置递减</span></span><br><span class="line">    <span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b2 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; a2-- * b2 &lt;&lt; endl; <span class="comment">//后置递减 先进行运算，变量再 -1 结果输出100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：前置递减先对变量进行–，再计算表达式，后置递减则相反</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C++学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何拥有属于你的Hexo博客（一）</title>
      <link href="/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li><p>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</p></li><li><p>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</p></li><li><p>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</p></li><li><p>本文为转载，非原创。原创博主：<a href="https://www.fomal.cc/">Fomalhaut🥝</a></p></li></ol><h2 id="2-环境与工具准备"><a href="#2-环境与工具准备" class="headerlink" title="2.环境与工具准备"></a>2.环境与工具准备</h2><p><strong>本教程主要面对的是Windows用户</strong></p><ul><li>操作系统：Windows10</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器(强烈推荐VSCODE)</li><li>GitHub 帐号</li><li>一个域名（强烈推荐买个域名）</li><li>云服务器（可选）</li></ul><h2 id="3-Node的安装"><a href="#3-Node的安装" class="headerlink" title="3.Node的安装"></a>3.Node的安装</h2><ol><li><p>打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>我个人的版本是 12.19.0，目前版本已经更新到19.0.0，按照个人经验，可以选个低一些的版本，可以和我的一样，否则后面会出现各种不兼容的问题！我之前就是安装16的，系统无法识别，如果大家遇到问题建议选个低版本的！历史版本下载页面：<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a><br><a href="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3"><img src="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3" alt="image-20221027173738226" style="zoom: 33%;"></a></p></li><li><p>下载后安装，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;nodejs&#x2F;】，也可以自定义路径。<br>这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!</p></li><li><p>安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</p></li><li><p>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><ol><li><p>在<code>Git BASH</code>输入如下命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>安装完后输入hexo -v验证是否安装成功。</p></li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004"><img src="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004" alt="image-20221027173525181" style="zoom:50%;"></a></p><h2 id="5-Github注册与创建仓库"><a href="#5-Github注册与创建仓库" class="headerlink" title="5.Github注册与创建仓库"></a>5.Github注册与创建仓库</h2><ol><li>进入官网 <a href="https://github.com/">https://github.com/</a><br><a href="https://bu.dusays.com/2022/05/12/627d2c0449341.webp"><img src="https://bu.dusays.com/2022/05/12/627d2c0449341.webp" alt="Github注册" style="zoom: 33%;"></a></li><li>点击右上角的 Sign up(注册)<br><a href="https://bu.dusays.com/2022/05/12/627d2c05ee628.png"><img src="https://bu.dusays.com/2022/05/12/627d2c05ee628.png" alt="Github注册" style="zoom:50%;"></a></li><li>填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。</li><li>注册完成后，点击右上角的<code>+</code>按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/7a06143d180d47088833a486732dccf5"><img src="https://s1.vika.cn/space/2022/10/27/7a06143d180d47088833a486732dccf5" alt="image-20221027110619071" style="zoom:50%;"></a></p><ul><li>仓库的格式必须为：&lt;用户名&gt;.github.io</li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 <a href="http://readme.md/">README.md</a> 文件</li><li>点击 Creat repository 进行创建</li></ul><p><a href="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a"><img src="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a" alt="image-20221027111641909" style="zoom: 33%;"></a></p><h2 id="6-Git安装"><a href="#6-Git安装" class="headerlink" title="6.Git安装"></a>6.Git安装</h2><ol><li><p>进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。</p><p><a href="https://s1.vika.cn/space/2022/10/27/28a7d7e6ef3f4df080da8d7e8337431b"><img src="https://s1.vika.cn/space/2022/10/27/28a7d7e6ef3f4df080da8d7e8337431b" alt="image-20221027111755697" style="zoom:50%;"></a></p></li><li><p>下载后傻瓜式安装Git即可，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;Git】，也可以自定义路径。</p></li><li><p>点击电脑左下角开始即可看见<code>Git Bash</code>。</p></li></ol><p><a href="https://bu.dusays.com/2022/05/13/627d410ddc940.webp"><img src="https://bu.dusays.com/2022/05/13/627d410ddc940.webp" alt="Git Bash" style="zoom:50%;"></a></p><ul><li><code>Git CMD</code> 是windows 命令行的指令风格</li><li><code>Git Bash</code> 是linux系统的指令风格（建议使用）</li><li><code>Git GUI</code>是图形化界面（新手学习不建议使用）</li></ul><ol><li><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure></li><li><p>配置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>git config -l</code> 检查是否配置成功，至此git安装及配置全部完成。</p><p><a href="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65"><img src="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65" alt="image-20221027112049822" style="zoom:50%;"></a></p></li></ol><h2 id="7-连接至Github"><a href="#7-连接至Github" class="headerlink" title="7.连接至Github"></a>7.连接至Github</h2><ol><li><p>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><a href="https://bu.dusays.com/2022/05/14/627e87126fc59.png"><img src="https://bu.dusays.com/2022/05/14/627e87126fc59.png" alt="公钥" style="zoom:50%;"></a></p><p>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</p><p><a href="https://bu.dusays.com/2022/05/14/627e87156038a.png"><img src="https://bu.dusays.com/2022/05/14/627e87156038a.png" alt="记事本打开公钥" style="zoom:50%;"></a></p></li><li><p>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏。</p><img src="https://s1.vika.cn/space/2022/10/27/4a69d999fed54ff78a5b84805d3c6a12" alt="image-20221027112347632" style="zoom:50%;"><p><a href="https://s1.vika.cn/space/2022/10/27/aa20ae7d8db34e2596638f5f031f0814"><img src="https://s1.vika.cn/space/2022/10/27/aa20ae7d8db34e2596638f5f031f0814" alt="image-20221027112416710" style="zoom:33%;"></a></p><p><a href="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace"><img src="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace" alt="image-20221027112657256" style="zoom:33%;"></a></p></li><li><p>测试连接，输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56"><img src="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56" alt="image-20221027112918539" style="zoom:33%;"></a></p><p>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。</p></li></ol><h2 id="8-初始化-Hexo-项目"><a href="#8-初始化-Hexo-项目" class="headerlink" title="8.初始化 Hexo 项目"></a>8.初始化 Hexo 项目</h2><ol><li><p>在目标路径（我这里选的路径为【C:&#x2F;Hexo-Blog】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">hexo init blog-demo(项目名)</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/1fbeb52671cf4b1daeca3660d1a31a2f"><img src="https://s1.vika.cn/space/2022/10/27/1fbeb52671cf4b1daeca3660d1a31a2f" alt="image-20221027113206776" style="zoom:33%;"></a></p></li><li><p>进入<code>blog-demo</code> ，输入<code>npm i</code>安装相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">cd blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/150eeb3e61c94b89a1cad2a3079b1f94"><img src="https://s1.vika.cn/space/2022/10/27/150eeb3e61c94b89a1cad2a3079b1f94" alt="image-20221027113331624" style="zoom:33%;"></a></p></li><li><p>初始化项目后，<code>blog-demo</code>有如下结构：</p></li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7"><img src="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7" alt="image-20221027113438707" style="zoom:33%;"></a></p><p>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p><ol><li><p>输入hexo server或者hexo s 启动项目</p><p><a href="https://s1.vika.cn/space/2022/10/27/688592f6db1448d29a2f722fc7a0bb0a"><img src="https://s1.vika.cn/space/2022/10/27/688592f6db1448d29a2f722fc7a0bb0a" alt="image-20221027113534970" style="zoom:33%;"></a></p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。</p><p><a href="https://bu.dusays.com/2022/05/26/628e5423df640.webp"><img src="https://bu.dusays.com/2022/05/26/628e5423df640.webp" alt="博客首页" style="zoom: 25%;"></a></p></li></ol><h2 id="9-将静态博客挂载到-GitHub-Pages"><a href="#9-将静态博客挂载到-GitHub-Pages" class="headerlink" title="9. 将静态博客挂载到 GitHub Pages"></a>9. 将静态博客挂载到 GitHub Pages</h2><ol><li><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为<code>main</code>代表主分支（注意缩进）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><ul><li><p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</p></li><li><p>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</p></li><li><p>hexo deploy：部署文章，可以用<code>hexo d</code>缩写</p><p><a href="https://s1.vika.cn/space/2022/10/27/7ed7b8256d75408aa86e90cd37d0ea53"><img src="https://s1.vika.cn/space/2022/10/27/7ed7b8256d75408aa86e90cd37d0ea53" alt="image-20221027113704801" style="zoom:33%;"></a></p><p>注意：deploy时可能要你输入 username 和 password。</p><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p><a href="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d"><img src="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d" alt="image-20221027113756069" style="zoom:33%;"></a></p><p>稍等两分钟，打开浏览器访问：<a href="https://fomalhaut-blog.github.io/">https://Fomalhaut-Blog.github.io</a> ，这时候我们就可以看到博客内容了。</p><p><a href="https://s1.vika.cn/space/2022/10/27/6de50dfe03604b07aa26fb7dd5fe1f99"><img src="https://s1.vika.cn/space/2022/10/27/6de50dfe03604b07aa26fb7dd5fe1f99" alt="image-20221027113923949" style="zoom: 25%;"></a></p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal Engine 4 从入门到入狱</title>
      <link href="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/"/>
      <url>/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Unreal-Engine-4-从入门到入狱"><a href="#Unreal-Engine-4-从入门到入狱" class="headerlink" title="Unreal Engine 4 从入门到入狱"></a>Unreal Engine 4 从入门到入狱</h1><h3 id="什么是Uworld？"><a href="#什么是Uworld？" class="headerlink" title="什么是Uworld？"></a>什么是Uworld？</h3><p><strong>Uworld</strong> 地址（ 世界地址 ） -&gt; 包含 <strong>Actor</strong> ( 对象数组  )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; 包含 **Count** ( 对象数量 )</span><br></pre></td></tr></table></figure><p><strong>Count</strong>：对应 <strong>Actor</strong> 对象数组中的对象计数</p><p><strong>Actor</strong>：</p><ul><li>是包含Uworld世界中所有实体对象的对象数组（比如游戏中的一辆载具，或者是一只丧失）</li><li>对象数组中每个对象的间隔： 0x8  0x10  0x18  0x20（ 根据游戏的不同每个对象的间隔有时也不同 ）</li></ul><p>关系： Count - 8 &#x3D; Actor（ 游戏中可能有多个Count 有的数值大 有的数值小）</p><h2 id="如何使用CE寻找Uworld"><a href="#如何使用CE寻找Uworld" class="headerlink" title="如何使用CE寻找Uworld"></a>如何使用CE寻找Uworld</h2><h3 id="利用Count（-数量-）反向寻找Uworld"><a href="#利用Count（-数量-）反向寻找Uworld" class="headerlink" title="利用Count（ 数量 ）反向寻找Uworld"></a>利用Count（ 数量 ）反向寻找Uworld</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在UE4游戏中，一般一颗子弹也算一个实体对象，所以我们可以利用这个特性。先大致估一个Count的数值范围（如 1 - 3000），使用CE搜介于两者之间的4字节类型。</span><br></pre></td></tr></table></figure><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2c7575dd67f5c05ebd66e5eedcb1a0b8.png" alt="截图"></p><p>利用Actor &#x3D; Count - 8 的关系确定找到的地址是否为 Count</p><p>这里找到了一个地址为 <strong>293F37B4860</strong> 的地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b5d881a212924ea808d7f4d30ed92fa5.png" alt="截图"></p><p>选中这个地址 Ctrl+B浏览内存 在内存浏览窗口内右键把显示类型改成8字节16进制</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b83960ca629903bc55feec2bd68479aa.png" alt="截图"></p><p>这里的57A就是十六进制的1402对应上上图 </p><p>我们找到 <strong>293F37B4860</strong> 的上一个地址<strong>293F37B4858</strong>按空格进入</p><p>可以看到这种排列整齐结构相同的地址列，所以我们可以确定此地址就是Count，地址<strong>293F37B4858</strong>就是Actor（ Actor &#x3D; Count - 8  ）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b5d881a212924ea808d7f4d30ed92fa5.png" alt="截图"></p><p>我们继续右键Count地址，点击”找出是什么访问了这个地址”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2c8bcf1eb722769acd8868529333c474.png" alt="截图"></p><p>点击显示反汇编程序 根据汇编代码我们可以看到</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/ed2e91bc188184b286e56fab2e206881.png" alt="截图"></p><br><p>rax+000000A0 就是我们的Count，而 rax 又等于 rcx+30 所以我们要搞清楚rcx是多少。</p><p>我们可以在下面两处代码处分别下端运行 看看寄存器里的rax 或 rcx是否是静态地址</p><p>SCUM.exe+3F6A139 - 48 8B 41 30           - mov rax,[rcx+30]</p><p>SCUM.exe+3F6A142 - 83 B8 A0000000 00     - cmp dword ptr [rax+000000A0],00</p><p>经过多次运行，我们发现分别在上述两行代码处下端运行rax 或 rcx都不会变化，所以我们</p><p>可以直接在CE中搜索rcx的值，找到对应该值得静态地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6e00b09df6380e18425ce18e0dced25a.png" alt="截图"></p><p><strong>&#x3D;&#x3D;6D52D40&#x3D;&#x3D;</strong>  就是Uwolrd的静态偏移</p><h2 id="如何使用CE寻找Gname"><a href="#如何使用CE寻找Gname" class="headerlink" title="如何使用CE寻找Gname"></a>如何使用CE寻找Gname</h2><h3 id="什么是Gname？"><a href="#什么是Gname？" class="headerlink" title="什么是Gname？"></a>什么是Gname？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gname是用于UE4中储存所有实体对象类名名称的名称表，每个实体对象中都有一个ID来对应Gname中相应的类名名称。</span><br></pre></td></tr></table></figure><h3 id="如何寻找4-23版本一下Gname（旧版）"><a href="#如何寻找4-23版本一下Gname（旧版）" class="headerlink" title="如何寻找4.23版本一下Gname（旧版）"></a>如何寻找4.23版本一下Gname（旧版）</h3><p>待记录。</p><h3 id="如何寻找4-23版本以上Gname（新版）"><a href="#如何寻找4-23版本以上Gname（新版）" class="headerlink" title="如何寻找4.23版本以上Gname（新版）"></a>如何寻找4.23版本以上Gname（新版）</h3><p>利用CE查找关键字符串：<strong>ByteProperty</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/f03e5d15e5d75e659ac2df6f7c8648f8.png" alt="截图"></p><p>找到类似这样，地址 - 8 后地址后四位等于 0000 的地址</p><p>我们继续搜索这个 - 8 后的地址 <strong>29329150000</strong>会出现一个静态地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/3961924eb1ef94c3b93a06f61eb2a85f.png" alt="截图"></p><p>这个静态地址（SCUM.exe+6BD0550）所指向的地址 - 10（HEX）就是Gname</p><p>所以&#x3D;&#x3D;<strong>6BD0540</strong>&#x3D;&#x3D;就是Gname的静态偏移。</p><h2 id="如何使用IDA寻找Uworld"><a href="#如何使用IDA寻找Uworld" class="headerlink" title="如何使用IDA寻找Uworld"></a>如何使用IDA寻找Uworld</h2><p>打开游戏后，使用“Scylla_v0.9.8”转储该游戏的dump文件</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/654a19d897f1438360e1febd1ae44081.png" alt="截图"></p><p>用IDA打开刚才转储的SCUM_DUMP.exe文件进行分析（过程稍慢，耐心等待）</p><p>分析完后，我们需要记录一个值（Imagebase），这个值就相当于CE中的SCUM.exe ( 基地址 )。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/211fd7c0ee4fa5893bc4fbc347a1fbcc.png" alt="截图"></p><p>Shift+F12分析字符串，等待IDA处理完毕，</p><p>然后我们按Ctrl+F搜索关键字符串：<strong>SeamlessTravel FlushLevelStreaming</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/27e9aed9b2259a4362ee3a76b5c6149f.png" alt="截图"></p><p>双击进去然后Ctrl+X交叉引用</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/592db92d8a360fa088ed0053c0e4b482.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/1924a11d74fdbca5486c9be867e3065e.png" alt="截图"></p><p>用这个地址减去我们之前记录的基地址就可以得到当前版本Uworld的静态偏移。</p><h2 id="如何使用IDA寻找Gname"><a href="#如何使用IDA寻找Gname" class="headerlink" title="如何使用IDA寻找Gname"></a>如何使用IDA寻找Gname</h2><p>通过关键字符串： <strong>ByteProperty</strong>  搜索</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/7ec600097c691472904423de1648261d.png" alt="截图"></p><p>Ctrl+X交叉引用</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d92da571df80cb9a9dfd1bf87d16232d.png" alt="截图"></p><p>得到一个比较规整的类似CE搜索该字符出现的比较规律的排列</p><p>我们F5反汇编此段函数，然后拉到该函数的头部，为了更好的找到这个函数头，我们把他的头部修改为FnamePool_fun.</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/82c10bb2dfcaf23fcd7242c5f9159ef2.png" alt="截图"></p><p>然后返回IDA View-A视窗拉到这个函数头部随便找个函数交叉引用进去F5反汇编</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/38940398fdd9003de51b4ace930c94fc.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/abb661ae4744015654f9c307bce5ad16.png" alt="截图"></p><p>上图这个地址就是Gname。</p><p>我们可以减去我们之前记录的基地址，就可以的到Gname的静态偏移。</p><h2 id="如何使用IDA寻找GameInstance-Ulevel-Actor"><a href="#如何使用IDA寻找GameInstance-Ulevel-Actor" class="headerlink" title="如何使用IDA寻找GameInstance.Ulevel.Actor"></a>如何使用IDA寻找GameInstance.Ulevel.Actor</h2><h3 id="如何使用IDA寻找Ulevel"><a href="#如何使用IDA寻找Ulevel" class="headerlink" title="如何使用IDA寻找Ulevel"></a>如何使用IDA寻找Ulevel</h3><p>我们通过关键字符串：    找到Uworld地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a912857212a1e6254bca85f126b194ba.png" alt="截图"></p><p>按X，在引用里寻找两个一样的 <strong>Call</strong> 指令</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/78c28479154ccff2953ef9f9af46de22.png" alt="截图"></p><p>双击进入CALL</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6782d117faa0056e1034cd06f5accfa7.png" alt="截图"></p><p>0x30便是Ulevel的静态偏移。</p><h3 id="如何使用IDA寻找GameInstance"><a href="#如何使用IDA寻找GameInstance" class="headerlink" title="如何使用IDA寻找GameInstance"></a>如何使用IDA寻找GameInstance</h3><p>通过搜索字符串：  <strong>InWorld-&gt;GetGameInstance() is null</strong> 双击进去</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/27dd64c5307019007f7a35b7e0c2dc83.png" alt="截图"></p><p>然后交叉引用 Ctrl+X</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c78048b1a64861b111a752d58f81f5e9.png" alt="截图"></p><h3 id="如何使用CE寻找LocalPlayer-PlayerController"><a href="#如何使用CE寻找LocalPlayer-PlayerController" class="headerlink" title="如何使用CE寻找LocalPlayer.PlayerController"></a>如何使用CE寻找LocalPlayer.PlayerController</h3><p>LocalPlayer（本地播放器）.PlayerController（玩家控制器）.Apawn（本人）都包含在GameInstance里</p><p>在所有标准的UE4引擎中，PlayerController的偏移都为 0x38-&gt;0x0-&gt;0x30</p><p>所以LocalPlayer（本地播放器的偏移为 0x38-&gt;0x0），我们可以通过其他方法验证</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/bb4fb58e50549ed667ee1f06d6391ec0.png" alt="截图"></p><p>因为SDK里 LocalPlayer（本地播放器）的变量是由数组方式呈现的，每个数组都有最大</p><p>数量和当前数量，因为我们本地玩家只有一个所以最小数量是1，而4就是定义数组时他的</p><p>最大数量，所以0x38就是localplayer的指针。</p><h3 id="接下来我们在Localplayer中寻找Apawn（本地玩家）："><a href="#接下来我们在Localplayer中寻找Apawn（本地玩家）：" class="headerlink" title="接下来我们在Localplayer中寻找Apawn（本地玩家）："></a>接下来我们在Localplayer中寻找Apawn（本地玩家）：</h3><p>我们要找到<strong>两 - 三个相差不远，地址后四位相同</strong>的指针（ 一般从0x100偏移处往后找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/02a21472809639c57ef38b6df98c5a72.png" alt="截图"></p><p>这三个相同的指针都是Apawn，我们随意用哪个偏移都可以。</p><h3 id="如何利用-Apawn（本地玩家）寻找共用坐标偏移："><a href="#如何利用-Apawn（本地玩家）寻找共用坐标偏移：" class="headerlink" title="如何利用 Apawn（本地玩家）寻找共用坐标偏移："></a>如何利用 Apawn（本地玩家）寻找共用坐标偏移：</h3><p>在标准的UE4引擎中，公用坐标的偏移一般在 0x100 - 0x160 之间。</p><p>我们在0x100 - 0x160之间先寻找到一个数组指针，特征类似这样：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/20ae02e52ac8cd6ce9ea607b568a68b5.png" alt="截图"></p><p>在这个数组指针的下方就是我们的公用坐标（RootComponent）偏移：0x130</p><p>在公用坐标中一般有3组类似坐标：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/16a84d0e5d191de7deb98b33b114edd3.png" alt="截图"></p><p>可以用做我们验证此处是否为公用坐标。</p><p>小结：我们通过GameInstance找到了如下关系数据：</p><p>GameInstance-&gt;ULocalPlayer-&gt;LocalPlayer-&gt;PlayerController-&gt;Apawn-&gt;RootComponent-&gt;Vector(坐标)</p><h2 id="如何利用通用特征码寻找矩阵偏移（两种方法）"><a href="#如何利用通用特征码寻找矩阵偏移（两种方法）" class="headerlink" title="如何利用通用特征码寻找矩阵偏移（两种方法）"></a>如何利用通用特征码寻找矩阵偏移（两种方法）</h2><p>矩阵特征码：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/91d35f961dc87ce78ef708d77c04f053.png" alt="截图"></p><p>我们找到带有矩阵特征的地址：（下图为矩阵特征，Ctrl+B后需要向下翻找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/42934e21f09cc3e184e5b0f11c68f63f.png" alt="截图"></p><p>我们将此地址（2270C3AA280）加入到地址列表中</p><h3 id="方法一（自动扫描）："><a href="#方法一（自动扫描）：" class="headerlink" title="方法一（自动扫描）："></a>方法一（自动扫描）：</h3><p>我们右键此地址点击 “对这个地址进行指针扫描”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/cc51ddd274381683793a88c53d73747d.png" alt="截图"></p><p>注意：将这个扫描的ptr缓存文件保存在不能含有中文的路径中，否则扫描结果不显示。</p><p>扫描后，第一个偏移为 0x20 的地址就是矩阵地址。</p><h3 id="方法二（手动跟踪）："><a href="#方法二（手动跟踪）：" class="headerlink" title="方法二（手动跟踪）："></a>方法二（手动跟踪）：</h3><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c57ce6d2c9607fefe0dbef1cd5026335.png" alt="截图"></p><p>我们右键此地址 “ 找出是什么访问了这个地址 ”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/85c44bfaf35b47e6ceb5b20da1c52cc2.png" alt="截图"></p><p>点击 显示反汇编程序</p><p>我们在rbx+280处下断运行，观察rbx是否变化</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/0bb555e81ef55bd8fdd1afc48fe481b7.png" alt="截图"></p><p>不变化，复制rbx的值，取消刚才断点继续运行，在CE中搜索刚才复制的值，我们得到11个结果</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/277d3dccaf859d535c101681401169d0.png" alt="截图"></p><p>在这些地址中找到有访问的地址将其加入到地址列表中，一般都为这样</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/41d1e2e33b00d0903738000770ea33e3.png" alt="截图"></p><p>然后我们将这个地址 -0x20 然后继续搜索这个值</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/226c942b3feed44b0e5b03e6928fe2f8.png" alt="截图"></p><p>得到一个静态地址，这个地址+0x20+0x180就是指向的矩阵地址。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/cb11a00428974acbedd67ff78a8f82e8.png" alt="截图"></p><ul><li><h3 id="为什么会-0x20？"><a href="#为什么会-0x20？" class="headerlink" title="为什么会 - 0x20？"></a>为什么会 - 0x20？</h3></li></ul><p>因为在标准的UE4引擎中这个 0X20 是固定的，</p><p>老版本的矩阵地址偏移一般为： 0x20-&gt;0x270</p><p>新版本的矩阵地址偏移一般为： 0x20-&gt;0x280</p><h2 id="如何利用PlayerController（玩家实例）寻找鼠标X、Y？"><a href="#如何利用PlayerController（玩家实例）寻找鼠标X、Y？" class="headerlink" title="如何利用PlayerController（玩家实例）寻找鼠标X、Y？"></a>如何利用PlayerController（玩家实例）寻找鼠标X、Y？</h2><p>我们直接对PlayerController（玩家实例）进行结构分析，找到指向APawn的三个相同的指针地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/80a0f504e7b995bb587794946d9183ab.png" alt="截图"></p><p>继续晃动鼠标，我们发现只有0x28C的值类似鼠标坐标，我们将其添加到地址列表中，此时这个地址的值为-121.06。Ctrl+B浏览内存发现他-4的地址还有一个类似的值，我们也将其添加到地址列表中。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/50c6a5dbfebcd8644aeb828ffb20e3c8.png" alt="截图"></p><br><p>这两个地址其实就是我们的鼠标地址，0x288为Y，0x28C为X 。</p><p>在一般游戏中较小的偏移一般为X，较大的偏移一般为Y，但在UE4中正好相反。</p><h2 id="如何利用PlayerController（玩家实例）寻找相机？"><a href="#如何利用PlayerController（玩家实例）寻找相机？" class="headerlink" title="如何利用PlayerController（玩家实例）寻找相机？"></a>如何利用PlayerController（玩家实例）寻找相机？</h2><p>我们还是找到指向APawn（本地玩家）的三个相同的指针地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/ae0e86cb8de244532482fd1c6026b8a1.png" alt="截图"></p><p>我们在CameraController中找到一组类似坐标的值（其中有很多0.xxx的数都不是，继续往下找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/3b09690fdcf432f207a1b98661590788.png" alt="截图"></p><p>我们发现一组数据，摇晃鼠标数值会随之浮动，所以这个就是CameraPos（相机坐标）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/1eb980cd392fed2f75f5cbe89faf55d3.png" alt="截图"></p><p>我们通过下图对比发现，其中有两个坐标和我们鼠标XY的值有时相同</p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/f7be480be28c6c5c5d8968fc360cfcc7.png" alt="截图" style="zoom:50%;"><p>这两个值所对应的地址就是CameraRot，我们可以利用这个地址进行相机转换。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2ad5239b9c2b175aa521ba77ffa96f02.png" alt="截图"></p><p>所以0xEB8就是我们的CameraFov。</p><h2 id="如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？"><a href="#如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？" class="headerlink" title="如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？"></a>如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？</h2><h3 id="什么是MeshArray（骨骼数组）？"><a href="#什么是MeshArray（骨骼数组）？" class="headerlink" title="什么是MeshArray（骨骼数组）？"></a>什么是MeshArray（骨骼数组）？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在虚幻4游戏世界中骨骼点都是以数组的方式呈现，骨骼数组是实体对象的一部分，或者说是一个组件，所以MeshArray（骨骼数组）是包含在APawn（本地玩家）里的。根据这个特性我们就可以寻找到MeshArray和其他绘制骨骼所需要的指针。</span><br></pre></td></tr></table></figure><h3 id="如何寻找-MeshArray（骨骼数组）？"><a href="#如何寻找-MeshArray（骨骼数组）？" class="headerlink" title="如何寻找 MeshArray（骨骼数组）？"></a>如何寻找 MeshArray（骨骼数组）？</h3><p>我们首先分析 <strong>Apawn（本地玩家）</strong>的数据结构，找到四个或三个紧紧相邻的指针：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/7925c5e6d6237c35e6c9c9c13e21c5fb.png" alt="截图"></p><p>这四个紧紧相临的指针的第一个指针就是 <strong>MeshComponent</strong>，<strong>MeshArray</strong> 和绘制骨骼所需要的** ComponentToWorld **就包含在里面。</p><p>找到 **MeshComPonent **以后，接下来我们寻找 **MeshArray **，类似下图结构的就是 **MeshArray **：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c51bf2f77d3119a222a98259e62f1c0a.png" alt="截图"></p><p>展开这两个指针，在游戏中走动这两个指针里的数据都在变化，这两个用哪个都可以。</p><h3 id="如何寻找-ComponentToWorld？"><a href="#如何寻找-ComponentToWorld？" class="headerlink" title="如何寻找 ComponentToWorld？"></a>如何寻找 ComponentToWorld？</h3><p>我们翻到 MeshComponent 指针的头部，从头开始找两组类似坐标的数据：</p><p>第一组：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b70007d4f167ab36c5950d1f459e4139.png" alt="截图"></p><p>第二组（ComponentToWorld就包含在里面）：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/5d55663e3ff3f13e0f9c63c2bba10e1e.png" alt="截图"></p><h3 id="如何寻找-MeshNameArray（骨骼名称数组）？"><a href="#如何寻找-MeshNameArray（骨骼名称数组）？" class="headerlink" title="如何寻找 MeshNameArray（骨骼名称数组）？"></a>如何寻找 MeshNameArray（骨骼名称数组）？</h3><p>我们返回到** MeshArray （骨骼数组）**的位置：</p><p>找到第一个骨骼数组往上的第一个指针：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/fa00ef47042e8a4cfec29ea7ed516d35.png" alt="截图"></p><p>我们进入 <strong>StaticMesh（静态骨骼指针）</strong>：</p><p>我们找到两组包含数量和定义数量和我们骨骼数组相同的两个数组，</p><p>第一个数组就是 <strong>MeshNameArray（骨骼名称数组）</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d41f3e1cbf10b94d780bf8f417d03e95.png" alt="截图"></p><p><strong>MeshNameArray（骨骼名称数组）</strong>内部排列：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/527b9e77e8639572f6da68f99e9a3ad4.png" alt="截图"></p><h2 id="如何寻找-Objectid-以及-PlayerState-？（补充）"><a href="#如何寻找-Objectid-以及-PlayerState-？（补充）" class="headerlink" title="如何寻找 Objectid 以及 PlayerState ？（补充）"></a>如何寻找 Objectid 以及 PlayerState ？（补充）</h2><h3 id="什么是Objectid？"><a href="#什么是Objectid？" class="headerlink" title="什么是Objectid？"></a>什么是Objectid？</h3><p>**Objectid **是用于储存对应实体对象类名ID的一个变量，可以配合Gname的算法得到这个实体对象的类名。</p><p>如何寻找Objectid？</p><p>我们随便找一个实体对象指针，这里我们用APawn （本人）指针来演示：</p><p>在标准的UE4引擎中，实体对象指针 + 0x18 就是我们的Objectid</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2e39a141b6d825a5396524613347fc78.png" alt="截图"></p><h3 id="如何寻找-PlayerState-？"><a href="#如何寻找-PlayerState-？" class="headerlink" title="如何寻找 PlayerState ？"></a>如何寻找 PlayerState ？</h3><p>PlayerState 在结构中位于 MeshComponent 的上面，我们可以利用 MeshComponent 寻找：</p><p>我们还是分析Apawn的结构，在APawn中找到 MeshComponent ，MeshComponent 的上方有两个紧紧相邻的指针</p><p>离 MeshComponent 最近的那个指针就是 PlayerState 。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/45e088784bb7ae2a255e0393fcc27fc2.png" alt="截图"></p><p>有时CE分析会出现这种结果：</p><p>我们就需要更改地址显示的数据类型来查看是否是指针</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/dd6213de9d554a36386a4f07d5920527.png" alt="截图"></p><p>这两个指针的下面都有一个字符串形式的数据。且字符串下面的4字节数据都为2。（可以多找几个UE4游戏判断通用特征，积累实战经验。）</p><h3 id="如何寻找-PlayerName（玩家的自定义名称）-？"><a href="#如何寻找-PlayerName（玩家的自定义名称）-？" class="headerlink" title="如何寻找 PlayerName（玩家的自定义名称） ？"></a>如何寻找 PlayerName（玩家的自定义名称） ？</h3><p>PlayerName 被包含在 PlayerState 里，其他 Teamid、KillCount也包含在其中。</p><p>我们先找 PlayerName：</p><p>进入 PlayerState 指针，找到如下图所示排列的指针 （最多翻500偏移即可找到）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c8ddb9cb26f63fa56faae788a697b652.png" alt="截图"></p><p>一个一个进去看指针的头部有没有Unicode String 类型的 数据 也就是字符串数据。我这里用的是Apawn分析的，所以这个字符串应该是我自己的名字，建议用APawn来分析。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d743d3ce6456adeb59457b1c0a9fc4d6.png" alt="截图"></p><h3 id="如何寻找-人物穿墙-灵魂出窍-以及-几种加速？"><a href="#如何寻找-人物穿墙-灵魂出窍-以及-几种加速？" class="headerlink" title="如何寻找 人物穿墙 灵魂出窍 以及 几种加速？"></a>如何寻找 人物穿墙 灵魂出窍 以及 几种加速？</h3><p><strong>人物穿墙 和 灵魂出窍 都比较好找 都在APawn头部</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/05f3267e0bac0fb53ca5421a56b38217.png" alt="截图"></p><p><strong>全局加速</strong>：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/bf995cbe05de5dd43d248bd6c2c3c569.png" alt="截图"></p><p><strong>局部加速</strong>：</p><p>在APawn里找到那四个紧紧相临的四个指针，</p><p>第一个是MeshComponent（骨骼组件）第二个就是MoveComponent（移动组件）进入移动组件</p><p>靠近头部，很多指针相邻的下面</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/26fc82a6f18dfb6bb984faba821928e4.png" alt="截图"></p><h3 id="制作特征码快速获得所需偏移！"><a href="#制作特征码快速获得所需偏移！" class="headerlink" title="制作特征码快速获得所需偏移！"></a>制作特征码快速获得所需偏移！</h3><p>Uworld:</p><p>48 89 0D ?? ?? ?? ?? 4D 85 F6 74 ?? 49 [+3]</p><p>Gname：</p><p>48 8D 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? 8B 54 ?? ?? 4C 8B C0</p><p>Matrix：</p><p>41 8B ?? ?? 83 F8 ?? 74 ?? 48 8B 15 ?? ?? ?? ?? 0F 1F 84 ?? ?? ?? ?? ?? 48 63 C8 48 8D</p><p>Ulevel:</p><p>48 8B ?? ?? 0F B6 EA 48 85 C9 74 ?? 41 0F [+3]</p><p>Count:</p><p>48 8B 41 ?? 48 85 C0 74 ?? 83 B8 ?? ?? ?? ?? ?? 74 ?? B0</p><p>Actor:</p><p>49 8B 85 ?? ?? ?? ?? 4A 89 ?? ?? 4D 63 BD ?? ?? ?? ?? 41 8D</p><p>GameInstance:</p><p>48 8b 86 ?? ?? ?? ?? 48 85 C0 48 8D ?? ?? ?? ?? ?? 48 8B</p><p>ULocalPlayer:</p><p>48 8B ?? ?? 48 8B ?? ?? 48 85 D2 74 ?? 48 8B 42 ?? 48 85 C0</p><p>Apawn:</p><p>48 8B 8E ?? ?? ?? ?? 48 8B 9C ?? ?? ?? ?? ?? 48 85 C9 75</p><p>RootComponent:</p><p>49 8B 9D ?? ?? ?? ?? 48 85 DB 74 ?? 0F 10</p><p>Vector3D:</p><p>41 0F 10 8A ?? ?? ?? ?? 0F ?? 4B ?? 41</p><p>PlayerState:</p><p>48 8B 9B ?? ?? ?? ?? B8 ?? ?? ?? ?? 48 8B</p><p>MeshComponent:</p><p>48 8B 8F ?? ?? ?? ?? 48 85 C9 74 ?? E8 ?? ?? ?? ?? 48 85 C0 74 ?? 48</p><h2 id="使用Hook实现子弹追踪-受子弹下坠影响-！"><a href="#使用Hook实现子弹追踪-受子弹下坠影响-！" class="headerlink" title="使用Hook实现子弹追踪(受子弹下坠影响)！"></a>使用Hook实现子弹追踪(受子弹下坠影响)！</h2><h3 id="SCUM-子弹追踪特征码："><a href="#SCUM-子弹追踪特征码：" class="headerlink" title="SCUM 子弹追踪特征码："></a>SCUM 子弹追踪特征码：</h3><p>41 0F 28 D0 E8 ?? ?? ?? ?? F2 (失效)</p><p>41 0F 28 ?? E8 ?? ?? ?? ?? 44 0F 28 ?? ?? ?? F2 0F 10</p><p>特征：</p><ul><li>有两个相同的Call</li><li>Call下面有一个 Je 跳转</li><li>在第二个Call处下断，开枪会断住</li></ul><p>追踪地址（Hook地址）：SCUM.exe+1D81103</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/e3e10a612087785e663db64b6639c311.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/4f8b248156e91337721f9e754360e588.png" alt="截图"></p><h3 id="追踪地址反汇编代码："><a href="#追踪地址反汇编代码：" class="headerlink" title="追踪地址反汇编代码："></a><strong>追踪地址反汇编代码：</strong></h3><p>SCUM.exe+1D810D1 - 0F28 D0               - movaps xmm2,xmm0<br>SCUM.exe+1D810D4 - E8 171B60FF           - call SCUM.exe+1382BF0<br>SCUM.exe+1D810D9 - F3 44 0F59 1D 9E8F2C03  - mulss xmm11,[SCUM.exe+504A080]<br>SCUM.exe+1D810E2 - 4C 8D 4C 24 70        - lea r9,[rsp+70]<br>SCUM.exe+1D810E7 - 48 8D 54 24 30        - lea rdx,[rsp+30]<br>SCUM.exe+1D810EC - 48 8D 4C 24 40        - lea rcx,[rsp+40]<br>SCUM.exe+1D810F1 - 41 0F28 D3            - movaps xmm2,xmm11<br>SCUM.exe+1D810F5 - E8 F61A60FF           - call SCUM.exe+1382BF0<br>SCUM.exe+1D810FA - 44 0F28 9C 24 00020000  - movaps xmm11,[rsp+00000200]<br>SCUM.exe+1D81103 - F2 0F10 38            - movsd xmm7,[rax]<br>SCUM.exe+1D81107 - F3 44 0F10 40 08      - movss xmm8,[rax+08]<br>SCUM.exe+1D8110D - 0F28 F7               - movaps xmm6,xmm7<br>SCUM.exe+1D81110 - 0FC6 F6 55            - shufps xmm6,xmm6,55</p><br><h3 id="利用Hook在CE中实现简单的子弹追踪："><a href="#利用Hook在CE中实现简单的子弹追踪：" class="headerlink" title="利用Hook在CE中实现简单的子弹追踪："></a>利用Hook在CE中实现简单的子弹追踪：</h3><p>空白特征：</p><p>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</p><p>我们首先在游戏中找一段空白的地址：SCUM.exe+6100820</p><p>然后在空白地址写入我们Hook的汇编代码：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2d9c79359bb0ff9a61457ee877c63ce3.png" alt="截图"></p><p>字节代码（Hook）：</p><p>66 83 3D 38 00 00 00 00 74 16 F2 0F 10 3D 3E 00 00 00 F3 44 0F 10 05 3D 00 00 00 E9 CD 08 C8 FB F2 0F 10 38 F3 44 0F 10 40 08 EB EF</p><p>回到我们的Hook地址：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c90dcf4fe863462d6206907c0d7b889d.png" alt="截图"></p><p>将此汇编修改为：</p><p>Hook地址汇编：E9 18 F7 37 04 90 90 90 90 90</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/40090c5733772addc42291552efe8bd9.png" alt="截图"></p><p><strong>将下方Je 汇编代码，修改为Jne。</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6456b32e3ae17047f47d6eabd134b2ff.png" alt="截图"></p><h3 id="关键："><a href="#关键：" class="headerlink" title="关键："></a>关键：</h3><p><strong>设置空白地址内存页属性为（可执行&#x2F;可读&#x2F;可写）！！！！</strong></p><p>因为我们在Hook中做了一个比较，所以我们有一个开关的功能。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>空白地址：SCUM.exe+6100820</li><li>空白地址汇编：66 83 3D 38 00 00 00 00 74 16 F2 0F 10 3D 3E 00 00 00 F3 44 0F 10 05 3D 00 00 00 E9 CD 08 C8 FB F2 0F 10 38 F3 44 0F 10 40 08 EB EF</li><li>Hook地址：SCUM.exe+1D81103</li><li>Hook地址修改汇编：E9 18 F7 37 04</li><li>Je跳转地址：SCUM.exe+1D8113D</li><li>Je地址汇编：75 71</li><li>开关地址：SCUM.exe+6100860  （四字节）</li><li>追踪.x : SCUM.exe+6100870  （单浮点）</li><li>追踪.y : SCUM.exe+6100874  （单浮点）</li><li>追踪.z : SCUM.exe+6100878  （单浮点）</li></ul><p>我们往追踪地址传入我们想让他击打的坐标，就可以完成追踪。</p><h2 id="使用Hook实现魔术子弹（瞬击，穿墙）！"><a href="#使用Hook实现魔术子弹（瞬击，穿墙）！" class="headerlink" title="使用Hook实现魔术子弹（瞬击，穿墙）！"></a>使用Hook实现魔术子弹（瞬击，穿墙）！</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>使用Hook手段修改出膛子弹的坐标，让子弹直接飞到目标脸上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在UE4引擎中所有的实体对象都有他的唯一 **标识符** ，子弹也包括在其中，想要实现修改子弹坐标，我们需要在游戏世界如此多的对象中找到隶属于 **子弹的唯一标识符** 。</span><br><span class="line"></span><br><span class="line">想要修改子弹坐标，我们还需要找到给 **坐标赋值的源代码** ，对源代码进行hook，单靠修改数值是无法修改的。所以我们还要找到它修改坐标源代码的地址。</span><br></pre></td></tr></table></figure><h3 id="寻找所需数据："><a href="#寻找所需数据：" class="headerlink" title="寻找所需数据："></a>寻找所需数据：</h3><p>子弹唯一标识符：（在游戏中开枪遍历世界对象对子弹标识符进行绘制）</p><p>HEX : 95710A （经多次测试，每种口径的子弹ID都为 0x95710A）</p><p>源代码：访问 RootComponent 下第三组坐标偏移的地址。</p><p>右键找出是什么改写了这个地址：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a5acadd91e6a33e4a85bf0540525a376.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a4c9f9c1d75e1ed1624caeca9a671cdd.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/693872ab8f4f1fe441be676529953254.png" alt="截图"></p><p>因为这次我们需要比较类名，所以写的复杂一点，但也大差不差。</p><p>原始代码：<br>SCUM.exe+3A1B4C7 - 33 D2                 - xor edx,edx<br>SCUM.exe+3A1B4C9 - EB 1C                 - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+3A1B4CB - 0F11 BF C0010000      - movups [rdi+000001C0],xmm7<br>SCUM.exe+3A1B4D2 - 45 8B C6              - mov r8d,r14d<br>SCUM.exe+3A1B4D5 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+3A1B4DD - B2 01                 - mov dl,01<br>SCUM.exe+3A1B4DF - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+3A1B4E7 - 48 8B CF              - m ov rcx,rdi</p><p>老方法找一个空白地址写入我们的Hook代码：</p><p><strong>空白地址</strong>：SCUM.exe+6100900</p><p>Hook地址：SCUM.exe+3A1B4D5 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12</p><p>我们还是要写一个开关，让他需要的时候再执行</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a06bf8d7b57f312663e7554bb1ca8300.png" alt="截图"></p><p>总结数据：</p><p>修改后：</p><p>SCUM.exe+3A1B4C7 - 33 D2                 - xor edx,edx<br>SCUM.exe+3A1B4C9 - EB 1C                 - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+3A1B4CB - 0F11 BF C0010000      - movups [rdi+000001C0],xmm7<br>SCUM.exe+3A1B4D2 - 45 8B C6              - mov r8d,r14d<br>SCUM.exe+3A1B4D5 - E9 26546E02           - jmp SCUM.exe+6100900<br>SCUM.exe+3A1B4DA - 90                    - nop<br>SCUM.exe+3A1B4DB - 90                    - nop<br>SCUM.exe+3A1B4DC - 90                    - nop<br>SCUM.exe+3A1B4DD - B2 01                 - mov dl,01<br>SCUM.exe+3A1B4DF - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+3A1B4E7 - 48 8B CF              - mov rcx,rdi</p><p>Hook段汇编：</p><p>SCUM.exe+6100900 - 66 83 3D 48000000 00  - cmp word ptr [SCUM.exe+6100950],00<br>SCUM.exe+6100908 - 74 09                 - je SCUM.exe+6100913<br>SCUM.exe+610090A - 81 7F 18 0A719500     - cmp [rdi+18],0095710A<br>SCUM.exe+6100911 - 74 17                 - je SCUM.exe+610092A<br>SCUM.exe+6100913 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+610091B - B2 01                 - mov dl,01<br>SCUM.exe+610091D - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+6100925 - E9 BDAB91FD           - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+610092A - 44 0F10 25 2E000000   - movups xmm12,[SCUM.exe+6100960]<br>SCUM.exe+6100932 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+610093A - 8B 0D 28000000        - mov ecx,[SCUM.exe+6100968]<br>SCUM.exe+6100940 - 89 8F D8010000        - mov [rdi+000001D8],ecx<br>SCUM.exe+6100946 - EB DD                 - jmp SCUM.exe+6100925</p><ul><li><strong>空白地址</strong>：SCUM.exe+6100900</li><li>Hook汇编：66 83 3D 48 00 00 00 00 74 09 81 7F 18 0A 71 95 00 74 17 44 0F 11 A7 D0 01 00 00 B2 01 44 0F 11 B7 E0 01 00 00 E9 BD AB 91 FD 44 0F 10 25 2E 00 00 00 44 0F 11 A7 D0 01 00 00 8B 0D 28 00 00 00 89 8F D8 01 00 00 EB DD</li><li>Hook汇编：66 83 3D 48 00 00 00 00 74 09 81 7F 18 D1 6E 95 00 74 17 44 0F 11 A7 D0 01 00 00 B2 01 44 0F 11 B7 E0 01 00 00 E9 10 E6 91 FD 44 0F 10 25 2E 00 00 00 44 0F 11 A7 D0 01 00 00 8B 0D 28 00 00 00 89 8F D8 01 00 00 EB DD</li><li>Hook地址：SCUM.exe+3A1B4D5 </li><li>Hook地址汇编：E9 26 54 6E 02 90 90 90</li><li>开关地址：SCUM.exe+6100950 （4字节）</li><li>坐标.x : SCUM.exe+6100960</li><li>坐标.y : SCUM.exe+6100964</li><li>坐标.z : SCUM.exe+6100968</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal Engine4 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
