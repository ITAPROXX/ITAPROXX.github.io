<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何拥有属于你的Hexo博客</title>
      <link href="/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/16/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li><p>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</p></li><li><p>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</p></li><li><p>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</p></li><li><p>本文为转载，非原创。原创博主：<a href="https://www.fomal.cc/">Fomalhaut🥝</a></p></li></ol><h2 id="2-环境与工具准备"><a href="#2-环境与工具准备" class="headerlink" title="2.环境与工具准备"></a>2.环境与工具准备</h2><p><strong>本教程主要面对的是Windows用户</strong></p><ul><li>操作系统：Windows10</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器(强烈推荐VSCODE)</li><li>GitHub 帐号</li><li>一个域名（强烈推荐买个域名）</li><li>云服务器（可选）</li></ul><h2 id="3-Node的安装"><a href="#3-Node的安装" class="headerlink" title="3.Node的安装"></a>3.Node的安装</h2><ol><li><p>打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>我个人的版本是 12.19.0，目前版本已经更新到19.0.0，按照个人经验，可以选个低一些的版本，可以和我的一样，否则后面会出现各种不兼容的问题！我之前就是安装16的，系统无法识别，如果大家遇到问题建议选个低版本的！历史版本下载页面：<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a><br><a href="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3"><img src="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3" alt="image-20221027173738226" style="zoom: 33%;"></a></p></li><li><p>下载后安装，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;nodejs&#x2F;】，也可以自定义路径。<br>这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!</p></li><li><p>安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</p></li><li><p>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><ol><li><p>在<code>Git BASH</code>输入如下命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>安装完后输入hexo -v验证是否安装成功。</p></li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004"><img src="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004" alt="image-20221027173525181" style="zoom:50%;"></a></p><h2 id="5-Github注册与创建仓库"><a href="#5-Github注册与创建仓库" class="headerlink" title="5.Github注册与创建仓库"></a>5.Github注册与创建仓库</h2><ol><li>进入官网 <a href="https://github.com/">https://github.com/</a><br><a href="https://bu.dusays.com/2022/05/12/627d2c0449341.webp"><img src="https://bu.dusays.com/2022/05/12/627d2c0449341.webp" alt="Github注册" style="zoom: 33%;"></a></li><li>点击右上角的 Sign up(注册)<br><a href="https://bu.dusays.com/2022/05/12/627d2c05ee628.png"><img src="https://bu.dusays.com/2022/05/12/627d2c05ee628.png" alt="Github注册" style="zoom:50%;"></a></li><li>填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。</li><li>注册完成后，点击右上角的<code>+</code>按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/7a06143d180d47088833a486732dccf5"><img src="https://s1.vika.cn/space/2022/10/27/7a06143d180d47088833a486732dccf5" alt="image-20221027110619071" style="zoom:50%;"></a></p><ul><li>仓库的格式必须为：&lt;用户名&gt;.github.io</li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 <a href="http://readme.md/">README.md</a> 文件</li><li>点击 Creat repository 进行创建</li></ul><p><a href="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a"><img src="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a" alt="image-20221027111641909" style="zoom: 33%;"></a></p><h2 id="6-Git安装"><a href="#6-Git安装" class="headerlink" title="6.Git安装"></a>6.Git安装</h2><ol><li><p>进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。</p><p><a href="https://s1.vika.cn/space/2022/10/27/28a7d7e6ef3f4df080da8d7e8337431b"><img src="https://s1.vika.cn/space/2022/10/27/28a7d7e6ef3f4df080da8d7e8337431b" alt="image-20221027111755697" style="zoom:50%;"></a></p></li><li><p>下载后傻瓜式安装Git即可，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;Git】，也可以自定义路径。</p></li><li><p>点击电脑左下角开始即可看见<code>Git Bash</code>。</p></li></ol><p><a href="https://bu.dusays.com/2022/05/13/627d410ddc940.webp"><img src="https://bu.dusays.com/2022/05/13/627d410ddc940.webp" alt="Git Bash" style="zoom:50%;"></a></p><ul><li><code>Git CMD</code> 是windows 命令行的指令风格</li><li><code>Git Bash</code> 是linux系统的指令风格（建议使用）</li><li><code>Git GUI</code>是图形化界面（新手学习不建议使用）</li></ul><ol><li><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure></li><li><p>配置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>git config -l</code> 检查是否配置成功，至此git安装及配置全部完成。</p><p><a href="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65"><img src="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65" alt="image-20221027112049822" style="zoom:50%;"></a></p></li></ol><h2 id="7-连接至Github"><a href="#7-连接至Github" class="headerlink" title="7.连接至Github"></a>7.连接至Github</h2><ol><li><p>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><a href="https://bu.dusays.com/2022/05/14/627e87126fc59.png"><img src="https://bu.dusays.com/2022/05/14/627e87126fc59.png" alt="公钥" style="zoom:50%;"></a></p><p>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</p><p><a href="https://bu.dusays.com/2022/05/14/627e87156038a.png"><img src="https://bu.dusays.com/2022/05/14/627e87156038a.png" alt="记事本打开公钥" style="zoom:50%;"></a></p></li><li><p>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏。</p><img src="https://s1.vika.cn/space/2022/10/27/4a69d999fed54ff78a5b84805d3c6a12" alt="image-20221027112347632" style="zoom:50%;"><p><a href="https://s1.vika.cn/space/2022/10/27/aa20ae7d8db34e2596638f5f031f0814"><img src="https://s1.vika.cn/space/2022/10/27/aa20ae7d8db34e2596638f5f031f0814" alt="image-20221027112416710" style="zoom:33%;"></a></p><p><a href="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace"><img src="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace" alt="image-20221027112657256" style="zoom:33%;"></a></p></li><li><p>测试连接，输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56"><img src="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56" alt="image-20221027112918539" style="zoom:33%;"></a></p><p>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。</p></li></ol><h2 id="8-初始化-Hexo-项目"><a href="#8-初始化-Hexo-项目" class="headerlink" title="8.初始化 Hexo 项目"></a>8.初始化 Hexo 项目</h2><ol><li><p>在目标路径（我这里选的路径为【C:&#x2F;Hexo-Blog】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">hexo init blog-demo(项目名)</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/1fbeb52671cf4b1daeca3660d1a31a2f"><img src="https://s1.vika.cn/space/2022/10/27/1fbeb52671cf4b1daeca3660d1a31a2f" alt="image-20221027113206776" style="zoom:33%;"></a></p></li><li><p>进入<code>blog-demo</code> ，输入<code>npm i</code>安装相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">cd blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><a href="https://s1.vika.cn/space/2022/10/27/150eeb3e61c94b89a1cad2a3079b1f94"><img src="https://s1.vika.cn/space/2022/10/27/150eeb3e61c94b89a1cad2a3079b1f94" alt="image-20221027113331624" style="zoom:33%;"></a></p></li><li><p>初始化项目后，<code>blog-demo</code>有如下结构：</p></li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7"><img src="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7" alt="image-20221027113438707" style="zoom:33%;"></a></p><p>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p><ol><li><p>输入hexo server或者hexo s 启动项目</p><p><a href="https://s1.vika.cn/space/2022/10/27/688592f6db1448d29a2f722fc7a0bb0a"><img src="https://s1.vika.cn/space/2022/10/27/688592f6db1448d29a2f722fc7a0bb0a" alt="image-20221027113534970" style="zoom:33%;"></a></p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。</p><p><a href="https://bu.dusays.com/2022/05/26/628e5423df640.webp"><img src="https://bu.dusays.com/2022/05/26/628e5423df640.webp" alt="博客首页" style="zoom: 25%;"></a></p></li></ol><h2 id="9-将静态博客挂载到-GitHub-Pages"><a href="#9-将静态博客挂载到-GitHub-Pages" class="headerlink" title="9. 将静态博客挂载到 GitHub Pages"></a>9. 将静态博客挂载到 GitHub Pages</h2><ol><li><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为<code>main</code>代表主分支（注意缩进）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><ul><li><p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</p></li><li><p>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</p></li><li><p>hexo deploy：部署文章，可以用<code>hexo d</code>缩写</p><p><a href="https://s1.vika.cn/space/2022/10/27/7ed7b8256d75408aa86e90cd37d0ea53"><img src="https://s1.vika.cn/space/2022/10/27/7ed7b8256d75408aa86e90cd37d0ea53" alt="image-20221027113704801" style="zoom:33%;"></a></p><p>注意：deploy时可能要你输入 username 和 password。</p><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p><a href="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d"><img src="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d" alt="image-20221027113756069" style="zoom:33%;"></a></p><p>稍等两分钟，打开浏览器访问：<a href="https://fomalhaut-blog.github.io/">https://Fomalhaut-Blog.github.io</a> ，这时候我们就可以看到博客内容了。</p><p><a href="https://s1.vika.cn/space/2022/10/27/6de50dfe03604b07aa26fb7dd5fe1f99"><img src="https://s1.vika.cn/space/2022/10/27/6de50dfe03604b07aa26fb7dd5fe1f99" alt="image-20221027113923949" style="zoom: 25%;"></a></p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal Engine 4 从入门到入狱</title>
      <link href="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/"/>
      <url>/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Unreal-Engine-4-从入门到入狱"><a href="#Unreal-Engine-4-从入门到入狱" class="headerlink" title="Unreal Engine 4 从入门到入狱"></a>Unreal Engine 4 从入门到入狱</h1><h3 id="什么是Uworld？"><a href="#什么是Uworld？" class="headerlink" title="什么是Uworld？"></a>什么是Uworld？</h3><p><strong>Uworld</strong> 地址（ 世界地址 ） -&gt; 包含 <strong>Actor</strong> ( 对象数组  )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; 包含 **Count** ( 对象数量 )</span><br></pre></td></tr></table></figure><p><strong>Count</strong>：对应 <strong>Actor</strong> 对象数组中的对象计数</p><p><strong>Actor</strong>：</p><ul><li>是包含Uworld世界中所有实体对象的对象数组（比如游戏中的一辆载具，或者是一只丧失）</li><li>对象数组中每个对象的间隔： 0x8  0x10  0x18  0x20（ 根据游戏的不同每个对象的间隔有时也不同 ）</li></ul><p>关系： Count - 8 &#x3D; Actor（ 游戏中可能有多个Count 有的数值大 有的数值小）</p><h2 id="如何使用CE寻找Uworld"><a href="#如何使用CE寻找Uworld" class="headerlink" title="如何使用CE寻找Uworld"></a>如何使用CE寻找Uworld</h2><h3 id="利用Count（-数量-）反向寻找Uworld"><a href="#利用Count（-数量-）反向寻找Uworld" class="headerlink" title="利用Count（ 数量 ）反向寻找Uworld"></a>利用Count（ 数量 ）反向寻找Uworld</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在UE4游戏中，一般一颗子弹也算一个实体对象，所以我们可以利用这个特性。先大致估一个Count的数值范围（如 1 - 3000），使用CE搜介于两者之间的4字节类型。</span><br></pre></td></tr></table></figure><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2c7575dd67f5c05ebd66e5eedcb1a0b8.png" alt="截图"></p><p>利用Actor &#x3D; Count - 8 的关系确定找到的地址是否为 Count</p><p>这里找到了一个地址为 <strong>293F37B4860</strong> 的地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b5d881a212924ea808d7f4d30ed92fa5.png" alt="截图"></p><p>选中这个地址 Ctrl+B浏览内存 在内存浏览窗口内右键把显示类型改成8字节16进制</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b83960ca629903bc55feec2bd68479aa.png" alt="截图"></p><p>这里的57A就是十六进制的1402对应上上图 </p><p>我们找到 <strong>293F37B4860</strong> 的上一个地址<strong>293F37B4858</strong>按空格进入</p><p>可以看到这种排列整齐结构相同的地址列，所以我们可以确定此地址就是Count，地址<strong>293F37B4858</strong>就是Actor（ Actor &#x3D; Count - 8  ）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b5d881a212924ea808d7f4d30ed92fa5.png" alt="截图"></p><p>我们继续右键Count地址，点击”找出是什么访问了这个地址”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2c8bcf1eb722769acd8868529333c474.png" alt="截图"></p><p>点击显示反汇编程序 根据汇编代码我们可以看到</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/ed2e91bc188184b286e56fab2e206881.png" alt="截图"></p><br><p>rax+000000A0 就是我们的Count，而 rax 又等于 rcx+30 所以我们要搞清楚rcx是多少。</p><p>我们可以在下面两处代码处分别下端运行 看看寄存器里的rax 或 rcx是否是静态地址</p><p>SCUM.exe+3F6A139 - 48 8B 41 30           - mov rax,[rcx+30]</p><p>SCUM.exe+3F6A142 - 83 B8 A0000000 00     - cmp dword ptr [rax+000000A0],00</p><p>经过多次运行，我们发现分别在上述两行代码处下端运行rax 或 rcx都不会变化，所以我们</p><p>可以直接在CE中搜索rcx的值，找到对应该值得静态地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6e00b09df6380e18425ce18e0dced25a.png" alt="截图"></p><p><strong>&#x3D;&#x3D;6D52D40&#x3D;&#x3D;</strong>  就是Uwolrd的静态偏移</p><h2 id="如何使用CE寻找Gname"><a href="#如何使用CE寻找Gname" class="headerlink" title="如何使用CE寻找Gname"></a>如何使用CE寻找Gname</h2><h3 id="什么是Gname？"><a href="#什么是Gname？" class="headerlink" title="什么是Gname？"></a>什么是Gname？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gname是用于UE4中储存所有实体对象类名名称的名称表，每个实体对象中都有一个ID来对应Gname中相应的类名名称。</span><br></pre></td></tr></table></figure><h3 id="如何寻找4-23版本一下Gname（旧版）"><a href="#如何寻找4-23版本一下Gname（旧版）" class="headerlink" title="如何寻找4.23版本一下Gname（旧版）"></a>如何寻找4.23版本一下Gname（旧版）</h3><p>待记录。</p><h3 id="如何寻找4-23版本以上Gname（新版）"><a href="#如何寻找4-23版本以上Gname（新版）" class="headerlink" title="如何寻找4.23版本以上Gname（新版）"></a>如何寻找4.23版本以上Gname（新版）</h3><p>利用CE查找关键字符串：<strong>ByteProperty</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/f03e5d15e5d75e659ac2df6f7c8648f8.png" alt="截图"></p><p>找到类似这样，地址 - 8 后地址后四位等于 0000 的地址</p><p>我们继续搜索这个 - 8 后的地址 <strong>29329150000</strong>会出现一个静态地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/3961924eb1ef94c3b93a06f61eb2a85f.png" alt="截图"></p><p>这个静态地址（SCUM.exe+6BD0550）所指向的地址 - 10（HEX）就是Gname</p><p>所以&#x3D;&#x3D;<strong>6BD0540</strong>&#x3D;&#x3D;就是Gname的静态偏移。</p><h2 id="如何使用IDA寻找Uworld"><a href="#如何使用IDA寻找Uworld" class="headerlink" title="如何使用IDA寻找Uworld"></a>如何使用IDA寻找Uworld</h2><p>打开游戏后，使用“Scylla_v0.9.8”转储该游戏的dump文件</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/654a19d897f1438360e1febd1ae44081.png" alt="截图"></p><p>用IDA打开刚才转储的SCUM_DUMP.exe文件进行分析（过程稍慢，耐心等待）</p><p>分析完后，我们需要记录一个值（Imagebase），这个值就相当于CE中的SCUM.exe ( 基地址 )。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/211fd7c0ee4fa5893bc4fbc347a1fbcc.png" alt="截图"></p><p>Shift+F12分析字符串，等待IDA处理完毕，</p><p>然后我们按Ctrl+F搜索关键字符串：<strong>SeamlessTravel FlushLevelStreaming</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/27e9aed9b2259a4362ee3a76b5c6149f.png" alt="截图"></p><p>双击进去然后Ctrl+X交叉引用</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/592db92d8a360fa088ed0053c0e4b482.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/1924a11d74fdbca5486c9be867e3065e.png" alt="截图"></p><p>用这个地址减去我们之前记录的基地址就可以得到当前版本Uworld的静态偏移。</p><h2 id="如何使用IDA寻找Gname"><a href="#如何使用IDA寻找Gname" class="headerlink" title="如何使用IDA寻找Gname"></a>如何使用IDA寻找Gname</h2><p>通过关键字符串： <strong>ByteProperty</strong>  搜索</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/7ec600097c691472904423de1648261d.png" alt="截图"></p><p>Ctrl+X交叉引用</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d92da571df80cb9a9dfd1bf87d16232d.png" alt="截图"></p><p>得到一个比较规整的类似CE搜索该字符出现的比较规律的排列</p><p>我们F5反汇编此段函数，然后拉到该函数的头部，为了更好的找到这个函数头，我们把他的头部修改为FnamePool_fun.</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/82c10bb2dfcaf23fcd7242c5f9159ef2.png" alt="截图"></p><p>然后返回IDA View-A视窗拉到这个函数头部随便找个函数交叉引用进去F5反汇编</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/38940398fdd9003de51b4ace930c94fc.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/abb661ae4744015654f9c307bce5ad16.png" alt="截图"></p><p>上图这个地址就是Gname。</p><p>我们可以减去我们之前记录的基地址，就可以的到Gname的静态偏移。</p><h2 id="如何使用IDA寻找GameInstance-Ulevel-Actor"><a href="#如何使用IDA寻找GameInstance-Ulevel-Actor" class="headerlink" title="如何使用IDA寻找GameInstance.Ulevel.Actor"></a>如何使用IDA寻找GameInstance.Ulevel.Actor</h2><h3 id="如何使用IDA寻找Ulevel"><a href="#如何使用IDA寻找Ulevel" class="headerlink" title="如何使用IDA寻找Ulevel"></a>如何使用IDA寻找Ulevel</h3><p>我们通过关键字符串：    找到Uworld地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a912857212a1e6254bca85f126b194ba.png" alt="截图"></p><p>按X，在引用里寻找两个一样的 <strong>Call</strong> 指令</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/78c28479154ccff2953ef9f9af46de22.png" alt="截图"></p><p>双击进入CALL</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6782d117faa0056e1034cd06f5accfa7.png" alt="截图"></p><p>0x30便是Ulevel的静态偏移。</p><h3 id="如何使用IDA寻找GameInstance"><a href="#如何使用IDA寻找GameInstance" class="headerlink" title="如何使用IDA寻找GameInstance"></a>如何使用IDA寻找GameInstance</h3><p>通过搜索字符串：  <strong>InWorld-&gt;GetGameInstance() is null</strong> 双击进去</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/27dd64c5307019007f7a35b7e0c2dc83.png" alt="截图"></p><p>然后交叉引用 Ctrl+X</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c78048b1a64861b111a752d58f81f5e9.png" alt="截图"></p><h3 id="如何使用CE寻找LocalPlayer-PlayerController"><a href="#如何使用CE寻找LocalPlayer-PlayerController" class="headerlink" title="如何使用CE寻找LocalPlayer.PlayerController"></a>如何使用CE寻找LocalPlayer.PlayerController</h3><p>LocalPlayer（本地播放器）.PlayerController（玩家控制器）.Apawn（本人）都包含在GameInstance里</p><p>在所有标准的UE4引擎中，PlayerController的偏移都为 0x38-&gt;0x0-&gt;0x30</p><p>所以LocalPlayer（本地播放器的偏移为 0x38-&gt;0x0），我们可以通过其他方法验证</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/bb4fb58e50549ed667ee1f06d6391ec0.png" alt="截图"></p><p>因为SDK里 LocalPlayer（本地播放器）的变量是由数组方式呈现的，每个数组都有最大</p><p>数量和当前数量，因为我们本地玩家只有一个所以最小数量是1，而4就是定义数组时他的</p><p>最大数量，所以0x38就是localplayer的指针。</p><h3 id="接下来我们在Localplayer中寻找Apawn（本地玩家）："><a href="#接下来我们在Localplayer中寻找Apawn（本地玩家）：" class="headerlink" title="接下来我们在Localplayer中寻找Apawn（本地玩家）："></a>接下来我们在Localplayer中寻找Apawn（本地玩家）：</h3><p>我们要找到<strong>两 - 三个相差不远，地址后四位相同</strong>的指针（ 一般从0x100偏移处往后找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/02a21472809639c57ef38b6df98c5a72.png" alt="截图"></p><p>这三个相同的指针都是Apawn，我们随意用哪个偏移都可以。</p><h3 id="如何利用-Apawn（本地玩家）寻找共用坐标偏移："><a href="#如何利用-Apawn（本地玩家）寻找共用坐标偏移：" class="headerlink" title="如何利用 Apawn（本地玩家）寻找共用坐标偏移："></a>如何利用 Apawn（本地玩家）寻找共用坐标偏移：</h3><p>在标准的UE4引擎中，公用坐标的偏移一般在 0x100 - 0x160 之间。</p><p>我们在0x100 - 0x160之间先寻找到一个数组指针，特征类似这样：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/20ae02e52ac8cd6ce9ea607b568a68b5.png" alt="截图"></p><p>在这个数组指针的下方就是我们的公用坐标（RootComponent）偏移：0x130</p><p>在公用坐标中一般有3组类似坐标：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/16a84d0e5d191de7deb98b33b114edd3.png" alt="截图"></p><p>可以用做我们验证此处是否为公用坐标。</p><p>小结：我们通过GameInstance找到了如下关系数据：</p><p>GameInstance-&gt;ULocalPlayer-&gt;LocalPlayer-&gt;PlayerController-&gt;Apawn-&gt;RootComponent-&gt;Vector(坐标)</p><h2 id="如何利用通用特征码寻找矩阵偏移（两种方法）"><a href="#如何利用通用特征码寻找矩阵偏移（两种方法）" class="headerlink" title="如何利用通用特征码寻找矩阵偏移（两种方法）"></a>如何利用通用特征码寻找矩阵偏移（两种方法）</h2><p>矩阵特征码：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/91d35f961dc87ce78ef708d77c04f053.png" alt="截图"></p><p>我们找到带有矩阵特征的地址：（下图为矩阵特征，Ctrl+B后需要向下翻找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/42934e21f09cc3e184e5b0f11c68f63f.png" alt="截图"></p><p>我们将此地址（2270C3AA280）加入到地址列表中</p><h3 id="方法一（自动扫描）："><a href="#方法一（自动扫描）：" class="headerlink" title="方法一（自动扫描）："></a>方法一（自动扫描）：</h3><p>我们右键此地址点击 “对这个地址进行指针扫描”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/cc51ddd274381683793a88c53d73747d.png" alt="截图"></p><p>注意：将这个扫描的ptr缓存文件保存在不能含有中文的路径中，否则扫描结果不显示。</p><p>扫描后，第一个偏移为 0x20 的地址就是矩阵地址。</p><h3 id="方法二（手动跟踪）："><a href="#方法二（手动跟踪）：" class="headerlink" title="方法二（手动跟踪）："></a>方法二（手动跟踪）：</h3><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c57ce6d2c9607fefe0dbef1cd5026335.png" alt="截图"></p><p>我们右键此地址 “ 找出是什么访问了这个地址 ”</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/85c44bfaf35b47e6ceb5b20da1c52cc2.png" alt="截图"></p><p>点击 显示反汇编程序</p><p>我们在rbx+280处下断运行，观察rbx是否变化</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/0bb555e81ef55bd8fdd1afc48fe481b7.png" alt="截图"></p><p>不变化，复制rbx的值，取消刚才断点继续运行，在CE中搜索刚才复制的值，我们得到11个结果</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/277d3dccaf859d535c101681401169d0.png" alt="截图"></p><p>在这些地址中找到有访问的地址将其加入到地址列表中，一般都为这样</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/41d1e2e33b00d0903738000770ea33e3.png" alt="截图"></p><p>然后我们将这个地址 -0x20 然后继续搜索这个值</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/226c942b3feed44b0e5b03e6928fe2f8.png" alt="截图"></p><p>得到一个静态地址，这个地址+0x20+0x180就是指向的矩阵地址。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/cb11a00428974acbedd67ff78a8f82e8.png" alt="截图"></p><ul><li><h3 id="为什么会-0x20？"><a href="#为什么会-0x20？" class="headerlink" title="为什么会 - 0x20？"></a>为什么会 - 0x20？</h3></li></ul><p>因为在标准的UE4引擎中这个 0X20 是固定的，</p><p>老版本的矩阵地址偏移一般为： 0x20-&gt;0x270</p><p>新版本的矩阵地址偏移一般为： 0x20-&gt;0x280</p><h2 id="如何利用PlayerController（玩家实例）寻找鼠标X、Y？"><a href="#如何利用PlayerController（玩家实例）寻找鼠标X、Y？" class="headerlink" title="如何利用PlayerController（玩家实例）寻找鼠标X、Y？"></a>如何利用PlayerController（玩家实例）寻找鼠标X、Y？</h2><p>我们直接对PlayerController（玩家实例）进行结构分析，找到指向APawn的三个相同的指针地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/80a0f504e7b995bb587794946d9183ab.png" alt="截图"></p><p>继续晃动鼠标，我们发现只有0x28C的值类似鼠标坐标，我们将其添加到地址列表中，此时这个地址的值为-121.06。Ctrl+B浏览内存发现他-4的地址还有一个类似的值，我们也将其添加到地址列表中。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/50c6a5dbfebcd8644aeb828ffb20e3c8.png" alt="截图"></p><br><p>这两个地址其实就是我们的鼠标地址，0x288为Y，0x28C为X 。</p><p>在一般游戏中较小的偏移一般为X，较大的偏移一般为Y，但在UE4中正好相反。</p><h2 id="如何利用PlayerController（玩家实例）寻找相机？"><a href="#如何利用PlayerController（玩家实例）寻找相机？" class="headerlink" title="如何利用PlayerController（玩家实例）寻找相机？"></a>如何利用PlayerController（玩家实例）寻找相机？</h2><p>我们还是找到指向APawn（本地玩家）的三个相同的指针地址</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/ae0e86cb8de244532482fd1c6026b8a1.png" alt="截图"></p><p>我们在CameraController中找到一组类似坐标的值（其中有很多0.xxx的数都不是，继续往下找）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/3b09690fdcf432f207a1b98661590788.png" alt="截图"></p><p>我们发现一组数据，摇晃鼠标数值会随之浮动，所以这个就是CameraPos（相机坐标）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/1eb980cd392fed2f75f5cbe89faf55d3.png" alt="截图"></p><p>我们通过下图对比发现，其中有两个坐标和我们鼠标XY的值有时相同</p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/f7be480be28c6c5c5d8968fc360cfcc7.png" alt="截图" style="zoom:50%;"><p>这两个值所对应的地址就是CameraRot，我们可以利用这个地址进行相机转换。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2ad5239b9c2b175aa521ba77ffa96f02.png" alt="截图"></p><p>所以0xEB8就是我们的CameraFov。</p><h2 id="如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？"><a href="#如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？" class="headerlink" title="如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？"></a>如何利用Apawn（本地玩家）寻找MeshArray（骨骼数组）？</h2><h3 id="什么是MeshArray（骨骼数组）？"><a href="#什么是MeshArray（骨骼数组）？" class="headerlink" title="什么是MeshArray（骨骼数组）？"></a>什么是MeshArray（骨骼数组）？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在虚幻4游戏世界中骨骼点都是以数组的方式呈现，骨骼数组是实体对象的一部分，或者说是一个组件，所以MeshArray（骨骼数组）是包含在APawn（本地玩家）里的。根据这个特性我们就可以寻找到MeshArray和其他绘制骨骼所需要的指针。</span><br></pre></td></tr></table></figure><h3 id="如何寻找-MeshArray（骨骼数组）？"><a href="#如何寻找-MeshArray（骨骼数组）？" class="headerlink" title="如何寻找 MeshArray（骨骼数组）？"></a>如何寻找 MeshArray（骨骼数组）？</h3><p>我们首先分析 <strong>Apawn（本地玩家）</strong>的数据结构，找到四个或三个紧紧相邻的指针：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/7925c5e6d6237c35e6c9c9c13e21c5fb.png" alt="截图"></p><p>这四个紧紧相临的指针的第一个指针就是 <strong>MeshComponent</strong>，<strong>MeshArray</strong> 和绘制骨骼所需要的** ComponentToWorld **就包含在里面。</p><p>找到 **MeshComPonent **以后，接下来我们寻找 **MeshArray **，类似下图结构的就是 **MeshArray **：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c51bf2f77d3119a222a98259e62f1c0a.png" alt="截图"></p><p>展开这两个指针，在游戏中走动这两个指针里的数据都在变化，这两个用哪个都可以。</p><h3 id="如何寻找-ComponentToWorld？"><a href="#如何寻找-ComponentToWorld？" class="headerlink" title="如何寻找 ComponentToWorld？"></a>如何寻找 ComponentToWorld？</h3><p>我们翻到 MeshComponent 指针的头部，从头开始找两组类似坐标的数据：</p><p>第一组：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/b70007d4f167ab36c5950d1f459e4139.png" alt="截图"></p><p>第二组（ComponentToWorld就包含在里面）：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/5d55663e3ff3f13e0f9c63c2bba10e1e.png" alt="截图"></p><h3 id="如何寻找-MeshNameArray（骨骼名称数组）？"><a href="#如何寻找-MeshNameArray（骨骼名称数组）？" class="headerlink" title="如何寻找 MeshNameArray（骨骼名称数组）？"></a>如何寻找 MeshNameArray（骨骼名称数组）？</h3><p>我们返回到** MeshArray （骨骼数组）**的位置：</p><p>找到第一个骨骼数组往上的第一个指针：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/fa00ef47042e8a4cfec29ea7ed516d35.png" alt="截图"></p><p>我们进入 <strong>StaticMesh（静态骨骼指针）</strong>：</p><p>我们找到两组包含数量和定义数量和我们骨骼数组相同的两个数组，</p><p>第一个数组就是 <strong>MeshNameArray（骨骼名称数组）</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d41f3e1cbf10b94d780bf8f417d03e95.png" alt="截图"></p><p><strong>MeshNameArray（骨骼名称数组）</strong>内部排列：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/527b9e77e8639572f6da68f99e9a3ad4.png" alt="截图"></p><h2 id="如何寻找-Objectid-以及-PlayerState-？（补充）"><a href="#如何寻找-Objectid-以及-PlayerState-？（补充）" class="headerlink" title="如何寻找 Objectid 以及 PlayerState ？（补充）"></a>如何寻找 Objectid 以及 PlayerState ？（补充）</h2><h3 id="什么是Objectid？"><a href="#什么是Objectid？" class="headerlink" title="什么是Objectid？"></a>什么是Objectid？</h3><p>**Objectid **是用于储存对应实体对象类名ID的一个变量，可以配合Gname的算法得到这个实体对象的类名。</p><p>如何寻找Objectid？</p><p>我们随便找一个实体对象指针，这里我们用APawn （本人）指针来演示：</p><p>在标准的UE4引擎中，实体对象指针 + 0x18 就是我们的Objectid</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2e39a141b6d825a5396524613347fc78.png" alt="截图"></p><h3 id="如何寻找-PlayerState-？"><a href="#如何寻找-PlayerState-？" class="headerlink" title="如何寻找 PlayerState ？"></a>如何寻找 PlayerState ？</h3><p>PlayerState 在结构中位于 MeshComponent 的上面，我们可以利用 MeshComponent 寻找：</p><p>我们还是分析Apawn的结构，在APawn中找到 MeshComponent ，MeshComponent 的上方有两个紧紧相邻的指针</p><p>离 MeshComponent 最近的那个指针就是 PlayerState 。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/45e088784bb7ae2a255e0393fcc27fc2.png" alt="截图"></p><p>有时CE分析会出现这种结果：</p><p>我们就需要更改地址显示的数据类型来查看是否是指针</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/dd6213de9d554a36386a4f07d5920527.png" alt="截图"></p><p>这两个指针的下面都有一个字符串形式的数据。且字符串下面的4字节数据都为2。（可以多找几个UE4游戏判断通用特征，积累实战经验。）</p><h3 id="如何寻找-PlayerName（玩家的自定义名称）-？"><a href="#如何寻找-PlayerName（玩家的自定义名称）-？" class="headerlink" title="如何寻找 PlayerName（玩家的自定义名称） ？"></a>如何寻找 PlayerName（玩家的自定义名称） ？</h3><p>PlayerName 被包含在 PlayerState 里，其他 Teamid、KillCount也包含在其中。</p><p>我们先找 PlayerName：</p><p>进入 PlayerState 指针，找到如下图所示排列的指针 （最多翻500偏移即可找到）</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c8ddb9cb26f63fa56faae788a697b652.png" alt="截图"></p><p>一个一个进去看指针的头部有没有Unicode String 类型的 数据 也就是字符串数据。我这里用的是Apawn分析的，所以这个字符串应该是我自己的名字，建议用APawn来分析。</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/d743d3ce6456adeb59457b1c0a9fc4d6.png" alt="截图"></p><h3 id="如何寻找-人物穿墙-灵魂出窍-以及-几种加速？"><a href="#如何寻找-人物穿墙-灵魂出窍-以及-几种加速？" class="headerlink" title="如何寻找 人物穿墙 灵魂出窍 以及 几种加速？"></a>如何寻找 人物穿墙 灵魂出窍 以及 几种加速？</h3><p><strong>人物穿墙 和 灵魂出窍 都比较好找 都在APawn头部</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/05f3267e0bac0fb53ca5421a56b38217.png" alt="截图"></p><p><strong>全局加速</strong>：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/bf995cbe05de5dd43d248bd6c2c3c569.png" alt="截图"></p><p><strong>局部加速</strong>：</p><p>在APawn里找到那四个紧紧相临的四个指针，</p><p>第一个是MeshComponent（骨骼组件）第二个就是MoveComponent（移动组件）进入移动组件</p><p>靠近头部，很多指针相邻的下面</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/26fc82a6f18dfb6bb984faba821928e4.png" alt="截图"></p><h3 id="制作特征码快速获得所需偏移！"><a href="#制作特征码快速获得所需偏移！" class="headerlink" title="制作特征码快速获得所需偏移！"></a>制作特征码快速获得所需偏移！</h3><p>Uworld:</p><p>48 89 0D ?? ?? ?? ?? 4D 85 F6 74 ?? 49 [+3]</p><p>Gname：</p><p>48 8D 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? 8B 54 ?? ?? 4C 8B C0</p><p>Matrix：</p><p>41 8B ?? ?? 83 F8 ?? 74 ?? 48 8B 15 ?? ?? ?? ?? 0F 1F 84 ?? ?? ?? ?? ?? 48 63 C8 48 8D</p><p>Ulevel:</p><p>48 8B ?? ?? 0F B6 EA 48 85 C9 74 ?? 41 0F [+3]</p><p>Count:</p><p>48 8B 41 ?? 48 85 C0 74 ?? 83 B8 ?? ?? ?? ?? ?? 74 ?? B0</p><p>Actor:</p><p>49 8B 85 ?? ?? ?? ?? 4A 89 ?? ?? 4D 63 BD ?? ?? ?? ?? 41 8D</p><p>GameInstance:</p><p>48 8b 86 ?? ?? ?? ?? 48 85 C0 48 8D ?? ?? ?? ?? ?? 48 8B</p><p>ULocalPlayer:</p><p>48 8B ?? ?? 48 8B ?? ?? 48 85 D2 74 ?? 48 8B 42 ?? 48 85 C0</p><p>Apawn:</p><p>48 8B 8E ?? ?? ?? ?? 48 8B 9C ?? ?? ?? ?? ?? 48 85 C9 75</p><p>RootComponent:</p><p>49 8B 9D ?? ?? ?? ?? 48 85 DB 74 ?? 0F 10</p><p>Vector3D:</p><p>41 0F 10 8A ?? ?? ?? ?? 0F ?? 4B ?? 41</p><p>PlayerState:</p><p>48 8B 9B ?? ?? ?? ?? B8 ?? ?? ?? ?? 48 8B</p><p>MeshComponent:</p><p>48 8B 8F ?? ?? ?? ?? 48 85 C9 74 ?? E8 ?? ?? ?? ?? 48 85 C0 74 ?? 48</p><h2 id="使用Hook实现子弹追踪-受子弹下坠影响-！"><a href="#使用Hook实现子弹追踪-受子弹下坠影响-！" class="headerlink" title="使用Hook实现子弹追踪(受子弹下坠影响)！"></a>使用Hook实现子弹追踪(受子弹下坠影响)！</h2><h3 id="SCUM-子弹追踪特征码："><a href="#SCUM-子弹追踪特征码：" class="headerlink" title="SCUM 子弹追踪特征码："></a>SCUM 子弹追踪特征码：</h3><p>41 0F 28 D0 E8 ?? ?? ?? ?? F2 (失效)</p><p>41 0F 28 ?? E8 ?? ?? ?? ?? 44 0F 28 ?? ?? ?? F2 0F 10</p><p>特征：</p><ul><li>有两个相同的Call</li><li>Call下面有一个 Je 跳转</li><li>在第二个Call处下断，开枪会断住</li></ul><p>追踪地址（Hook地址）：SCUM.exe+1D81103</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/e3e10a612087785e663db64b6639c311.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/4f8b248156e91337721f9e754360e588.png" alt="截图"></p><h3 id="追踪地址反汇编代码："><a href="#追踪地址反汇编代码：" class="headerlink" title="追踪地址反汇编代码："></a><strong>追踪地址反汇编代码：</strong></h3><p>SCUM.exe+1D810D1 - 0F28 D0               - movaps xmm2,xmm0<br>SCUM.exe+1D810D4 - E8 171B60FF           - call SCUM.exe+1382BF0<br>SCUM.exe+1D810D9 - F3 44 0F59 1D 9E8F2C03  - mulss xmm11,[SCUM.exe+504A080]<br>SCUM.exe+1D810E2 - 4C 8D 4C 24 70        - lea r9,[rsp+70]<br>SCUM.exe+1D810E7 - 48 8D 54 24 30        - lea rdx,[rsp+30]<br>SCUM.exe+1D810EC - 48 8D 4C 24 40        - lea rcx,[rsp+40]<br>SCUM.exe+1D810F1 - 41 0F28 D3            - movaps xmm2,xmm11<br>SCUM.exe+1D810F5 - E8 F61A60FF           - call SCUM.exe+1382BF0<br>SCUM.exe+1D810FA - 44 0F28 9C 24 00020000  - movaps xmm11,[rsp+00000200]<br>SCUM.exe+1D81103 - F2 0F10 38            - movsd xmm7,[rax]<br>SCUM.exe+1D81107 - F3 44 0F10 40 08      - movss xmm8,[rax+08]<br>SCUM.exe+1D8110D - 0F28 F7               - movaps xmm6,xmm7<br>SCUM.exe+1D81110 - 0FC6 F6 55            - shufps xmm6,xmm6,55</p><br><h3 id="利用Hook在CE中实现简单的子弹追踪："><a href="#利用Hook在CE中实现简单的子弹追踪：" class="headerlink" title="利用Hook在CE中实现简单的子弹追踪："></a>利用Hook在CE中实现简单的子弹追踪：</h3><p>空白特征：</p><p>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</p><p>我们首先在游戏中找一段空白的地址：SCUM.exe+6100820</p><p>然后在空白地址写入我们Hook的汇编代码：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/2d9c79359bb0ff9a61457ee877c63ce3.png" alt="截图"></p><p>字节代码（Hook）：</p><p>66 83 3D 38 00 00 00 00 74 16 F2 0F 10 3D 3E 00 00 00 F3 44 0F 10 05 3D 00 00 00 E9 CD 08 C8 FB F2 0F 10 38 F3 44 0F 10 40 08 EB EF</p><p>回到我们的Hook地址：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/c90dcf4fe863462d6206907c0d7b889d.png" alt="截图"></p><p>将此汇编修改为：</p><p>Hook地址汇编：E9 18 F7 37 04 90 90 90 90 90</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/40090c5733772addc42291552efe8bd9.png" alt="截图"></p><p><strong>将下方Je 汇编代码，修改为Jne。</strong></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/6456b32e3ae17047f47d6eabd134b2ff.png" alt="截图"></p><h3 id="关键："><a href="#关键：" class="headerlink" title="关键："></a>关键：</h3><p><strong>设置空白地址内存页属性为（可执行&#x2F;可读&#x2F;可写）！！！！</strong></p><p>因为我们在Hook中做了一个比较，所以我们有一个开关的功能。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>空白地址：SCUM.exe+6100820</li><li>空白地址汇编：66 83 3D 38 00 00 00 00 74 16 F2 0F 10 3D 3E 00 00 00 F3 44 0F 10 05 3D 00 00 00 E9 CD 08 C8 FB F2 0F 10 38 F3 44 0F 10 40 08 EB EF</li><li>Hook地址：SCUM.exe+1D81103</li><li>Hook地址修改汇编：E9 18 F7 37 04</li><li>Je跳转地址：SCUM.exe+1D8113D</li><li>Je地址汇编：75 71</li><li>开关地址：SCUM.exe+6100860  （四字节）</li><li>追踪.x : SCUM.exe+6100870  （单浮点）</li><li>追踪.y : SCUM.exe+6100874  （单浮点）</li><li>追踪.z : SCUM.exe+6100878  （单浮点）</li></ul><p>我们往追踪地址传入我们想让他击打的坐标，就可以完成追踪。</p><h2 id="使用Hook实现魔术子弹（瞬击，穿墙）！"><a href="#使用Hook实现魔术子弹（瞬击，穿墙）！" class="headerlink" title="使用Hook实现魔术子弹（瞬击，穿墙）！"></a>使用Hook实现魔术子弹（瞬击，穿墙）！</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>使用Hook手段修改出膛子弹的坐标，让子弹直接飞到目标脸上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在UE4引擎中所有的实体对象都有他的唯一 **标识符** ，子弹也包括在其中，想要实现修改子弹坐标，我们需要在游戏世界如此多的对象中找到隶属于 **子弹的唯一标识符** 。</span><br><span class="line"></span><br><span class="line">想要修改子弹坐标，我们还需要找到给 **坐标赋值的源代码** ，对源代码进行hook，单靠修改数值是无法修改的。所以我们还要找到它修改坐标源代码的地址。</span><br></pre></td></tr></table></figure><h3 id="寻找所需数据："><a href="#寻找所需数据：" class="headerlink" title="寻找所需数据："></a>寻找所需数据：</h3><p>子弹唯一标识符：（在游戏中开枪遍历世界对象对子弹标识符进行绘制）</p><p>HEX : 95710A （经多次测试，每种口径的子弹ID都为 0x95710A）</p><p>源代码：访问 RootComponent 下第三组坐标偏移的地址。</p><p>右键找出是什么改写了这个地址：</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a5acadd91e6a33e4a85bf0540525a376.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a4c9f9c1d75e1ed1624caeca9a671cdd.png" alt="截图"></p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/693872ab8f4f1fe441be676529953254.png" alt="截图"></p><p>因为这次我们需要比较类名，所以写的复杂一点，但也大差不差。</p><p>原始代码：<br>SCUM.exe+3A1B4C7 - 33 D2                 - xor edx,edx<br>SCUM.exe+3A1B4C9 - EB 1C                 - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+3A1B4CB - 0F11 BF C0010000      - movups [rdi+000001C0],xmm7<br>SCUM.exe+3A1B4D2 - 45 8B C6              - mov r8d,r14d<br>SCUM.exe+3A1B4D5 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+3A1B4DD - B2 01                 - mov dl,01<br>SCUM.exe+3A1B4DF - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+3A1B4E7 - 48 8B CF              - m ov rcx,rdi</p><p>老方法找一个空白地址写入我们的Hook代码：</p><p><strong>空白地址</strong>：SCUM.exe+6100900</p><p>Hook地址：SCUM.exe+3A1B4D5 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12</p><p>我们还是要写一个开关，让他需要的时候再执行</p><p><img src="/2022/12/15/Unreal-Engine-4-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1/a06bf8d7b57f312663e7554bb1ca8300.png" alt="截图"></p><p>总结数据：</p><p>修改后：</p><p>SCUM.exe+3A1B4C7 - 33 D2                 - xor edx,edx<br>SCUM.exe+3A1B4C9 - EB 1C                 - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+3A1B4CB - 0F11 BF C0010000      - movups [rdi+000001C0],xmm7<br>SCUM.exe+3A1B4D2 - 45 8B C6              - mov r8d,r14d<br>SCUM.exe+3A1B4D5 - E9 26546E02           - jmp SCUM.exe+6100900<br>SCUM.exe+3A1B4DA - 90                    - nop<br>SCUM.exe+3A1B4DB - 90                    - nop<br>SCUM.exe+3A1B4DC - 90                    - nop<br>SCUM.exe+3A1B4DD - B2 01                 - mov dl,01<br>SCUM.exe+3A1B4DF - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+3A1B4E7 - 48 8B CF              - mov rcx,rdi</p><p>Hook段汇编：</p><p>SCUM.exe+6100900 - 66 83 3D 48000000 00  - cmp word ptr [SCUM.exe+6100950],00<br>SCUM.exe+6100908 - 74 09                 - je SCUM.exe+6100913<br>SCUM.exe+610090A - 81 7F 18 0A719500     - cmp [rdi+18],0095710A<br>SCUM.exe+6100911 - 74 17                 - je SCUM.exe+610092A<br>SCUM.exe+6100913 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+610091B - B2 01                 - mov dl,01<br>SCUM.exe+610091D - 44 0F11 B7 E0010000   - movups [rdi+000001E0],xmm14<br>SCUM.exe+6100925 - E9 BDAB91FD           - jmp SCUM.exe+3A1B4E7<br>SCUM.exe+610092A - 44 0F10 25 2E000000   - movups xmm12,[SCUM.exe+6100960]<br>SCUM.exe+6100932 - 44 0F11 A7 D0010000   - movups [rdi+000001D0],xmm12<br>SCUM.exe+610093A - 8B 0D 28000000        - mov ecx,[SCUM.exe+6100968]<br>SCUM.exe+6100940 - 89 8F D8010000        - mov [rdi+000001D8],ecx<br>SCUM.exe+6100946 - EB DD                 - jmp SCUM.exe+6100925</p><ul><li><strong>空白地址</strong>：SCUM.exe+6100900</li><li>Hook汇编：66 83 3D 48 00 00 00 00 74 09 81 7F 18 0A 71 95 00 74 17 44 0F 11 A7 D0 01 00 00 B2 01 44 0F 11 B7 E0 01 00 00 E9 BD AB 91 FD 44 0F 10 25 2E 00 00 00 44 0F 11 A7 D0 01 00 00 8B 0D 28 00 00 00 89 8F D8 01 00 00 EB DD</li><li>Hook汇编：66 83 3D 48 00 00 00 00 74 09 81 7F 18 D1 6E 95 00 74 17 44 0F 11 A7 D0 01 00 00 B2 01 44 0F 11 B7 E0 01 00 00 E9 10 E6 91 FD 44 0F 10 25 2E 00 00 00 44 0F 11 A7 D0 01 00 00 8B 0D 28 00 00 00 89 8F D8 01 00 00 EB DD</li><li>Hook地址：SCUM.exe+3A1B4D5 </li><li>Hook地址汇编：E9 26 54 6E 02 90 90 90</li><li>开关地址：SCUM.exe+6100950 （4字节）</li><li>坐标.x : SCUM.exe+6100960</li><li>坐标.y : SCUM.exe+6100964</li><li>坐标.z : SCUM.exe+6100968</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal Engine4 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
